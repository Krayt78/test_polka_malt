{"version":3,"file":"viewFns.mjs","sources":["../../src/viewFns.ts"],"sourcesContent":["import { firstValueFromWithSignal, isOptionalArg } from \"@/utils\"\nimport { ChainHead$ } from \"@polkadot-api/observable-client\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport { map, mergeMap } from \"rxjs\"\nimport { CompatibilityFunctions, CompatibilityHelper } from \"./compatibility\"\nimport { compactNumber, _void } from \"@polkadot-api/substrate-bindings\"\n\ntype CallOptions = Partial<{\n  at: string\n  signal: AbortSignal\n}>\n\ntype WithCallOptions<Args extends Array<any>> = Args[\"length\"] extends 0\n  ? [options?: CallOptions]\n  : [...args: Args, options?: CallOptions]\n\nexport type ViewFn<Unsafe, D, Args extends Array<any>, Payload> = {\n  /**\n   * Get `Payload` (Promise-based) for the view function.\n   *\n   * @param args  All keys needed for that runtime call.\n   *              At the end, optionally set which block to target (latest\n   *              known finalized is the default) and an AbortSignal.\n   */\n  (...args: WithCallOptions<Args>): Promise<Payload>\n} & (Unsafe extends true ? {} : CompatibilityFunctions<D>)\n\nconst RUNTIME_NAMESPACE = \"RuntimeViewFunction\"\nconst RUNTIME_METHOD = \"execute_view_function\"\nconst RUNTIME_CALL_NAME = RUNTIME_NAMESPACE + \"_\" + RUNTIME_METHOD\n\nexport const createViewFnEntry = (\n  pallet: string,\n  entry: string,\n  chainHead: ChainHead$,\n  {\n    isCompatible,\n    getCompatibilityLevel,\n    compatibleRuntime$,\n    argsAreCompatible,\n    valuesAreCompatible,\n  }: CompatibilityHelper,\n): ViewFn<any, any, any, any> => {\n  const compatibilityError = () =>\n    new Error(`Incompatible runtime entry ViewFn(${pallet}.${entry})`)\n\n  const fn = (...args: Array<any>) => {\n    const lastArg = args[args.length - 1]\n    const isLastArgOptional = isOptionalArg(lastArg)\n    const { signal, at: _at }: CallOptions = isLastArgOptional ? lastArg : {}\n    const at = _at ?? null\n\n    const result$ = compatibleRuntime$(chainHead, at).pipe(\n      mergeMap(([runtime, ctx]) => {\n        let apiCodec\n        try {\n          apiCodec = ctx.dynamicBuilder.buildRuntimeCall(\n            RUNTIME_NAMESPACE,\n            RUNTIME_METHOD,\n          )\n        } catch {\n          throw new Error(\n            `Runtime entry RuntimeCall(${RUNTIME_CALL_NAME}) not found`,\n          )\n        }\n        let viewCodec\n        try {\n          viewCodec = ctx.dynamicBuilder.buildViewFn(pallet, entry)\n        } catch {\n          throw new Error(`Runtime entry ViewFn(${pallet}.${entry}) not found`)\n        }\n        if (!argsAreCompatible(runtime, ctx, args)) throw compatibilityError()\n        const viewArgs = viewCodec.args.enc(args)\n        const arg = mergeUint8(\n          fromHex(\n            ctx.lookup.metadata.pallets\n              .find(({ name }) => name === pallet)!\n              .viewFns.find(({ name }) => name === entry)!.id,\n          ),\n          compactNumber.enc(viewArgs.length),\n          viewArgs,\n        )\n\n        return chainHead.call$(at, RUNTIME_CALL_NAME, toHex(arg)).pipe(\n          map((v) => {\n            try {\n              const decoded = apiCodec.value.dec(v)\n              if (\n                !(\"success\" in decoded && \"value\" in decoded) ||\n                (!(\"type\" in decoded.value) && !(\"asBytes\" in decoded.value))\n              )\n                throw null\n              return decoded\n            } catch {\n              throw new Error(\n                `Unexpected RuntimeCall(${RUNTIME_CALL_NAME}) type`,\n              )\n            }\n          }),\n          map(({ success, value }) => {\n            if (!success) throw new Error(`ViewFn API Error: ${value.type}`)\n            const decoded = viewCodec.value.dec(value.asBytes())\n            if (!valuesAreCompatible(runtime, ctx, decoded))\n              throw compatibilityError()\n            return decoded\n          }),\n        )\n      }),\n    )\n\n    return firstValueFromWithSignal(result$, signal)\n  }\n\n  return Object.assign(fn, { getCompatibilityLevel, isCompatible })\n}\n"],"names":[],"mappings":"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"}