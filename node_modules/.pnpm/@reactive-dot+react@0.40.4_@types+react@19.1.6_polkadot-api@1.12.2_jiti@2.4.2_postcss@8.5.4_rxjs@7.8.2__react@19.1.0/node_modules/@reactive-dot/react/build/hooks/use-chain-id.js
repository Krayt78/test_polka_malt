import { ChainIdContext } from "../contexts/chain.js";
import { useConfig } from "./use-config.js";
import { BaseError } from "@reactive-dot/core";
import { use } from "react";
/**
 * Hook for getting all configured chain IDs.
 *
 * @group Hooks
 * @returns All configured chain IDs
 */
export function useChainIds() {
    return Object.keys(useConfig().chains);
}
/**
 * Hook for getting the current chain ID.
 *
 * @group Hooks
 * @returns The current chain ID
 */
export function useChainId() {
    const chainId = use(ChainIdContext);
    if (chainId === undefined) {
        throw new BaseError("No chain ID provided");
    }
    return chainId;
}
/**
 * @internal
 * @group Hooks
 */
export function internal_useChainId({ optionalChainId = false, ...options } = {}) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const contextChainId = use(ChainIdContext);
    const chainId = options?.chainId ?? contextChainId;
    if (!optionalChainId && chainId === undefined) {
        throw new BaseError("No chain ID provided");
    }
    return chainId;
}
//# sourceMappingURL=use-chain-id.js.map