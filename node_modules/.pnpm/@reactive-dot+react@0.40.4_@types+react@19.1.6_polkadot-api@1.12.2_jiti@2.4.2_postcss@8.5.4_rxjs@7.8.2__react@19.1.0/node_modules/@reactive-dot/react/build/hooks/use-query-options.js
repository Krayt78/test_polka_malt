import { ChainIdContext } from "../contexts/chain.js";
import { Query, BaseError } from "@reactive-dot/core";
import { use, useMemo } from "react";
/**
 * @internal
 * @group Hooks
 */
export function useQueryOptions(queryOrOptions, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
mayBeOptions) {
    const contextChainId = use(ChainIdContext);
    return useMemo(() => (Array.isArray(queryOrOptions)
        ? queryOrOptions
        : [{ query: queryOrOptions, ...mayBeOptions }]).map((options) => {
        const chainId = options.chainId ?? contextChainId;
        if (chainId === undefined) {
            throw new BaseError("No chain ID provided");
        }
        return {
            chainId,
            query: options.query instanceof Query
                ? options.query
                : typeof options.query === "function"
                    ? options.query(new Query()) || undefined
                    : undefined,
        };
    }), [contextChainId, mayBeOptions, queryOrOptions]);
}
//# sourceMappingURL=use-query-options.js.map