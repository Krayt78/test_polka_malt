import { atom } from "jotai";
import { firstValueFrom } from "rxjs";
export const empty = Symbol("empty");
export function atomWithObservable(getObservable, options) {
    const observableAtom = atom((get) => {
        const observable = getObservable(get);
        const initialValue = (() => {
            if (options === undefined) {
                return empty;
            }
            if (!("initialValue" in options)) {
                return empty;
            }
            if (options.initialValue instanceof Function) {
                return options.initialValue(get);
            }
            return options.initialValue;
        })();
        const dataAtom = atom(initialValue !== empty
            ? {
                value: initialValue,
            }
            : { value: firstValueFrom(observable) });
        dataAtom.onMount = (update) => {
            const subscription = observable.subscribe({
                next: (value) => update({ value }),
                error: (error) => update({ error }),
            });
            return () => {
                subscription.unsubscribe();
            };
        };
        return dataAtom;
    });
    return atom((get) => {
        const data = get(get(observableAtom));
        if ("error" in data) {
            throw data.error;
        }
        return data.value;
    });
}
//# sourceMappingURL=atom-with-observable.js.map