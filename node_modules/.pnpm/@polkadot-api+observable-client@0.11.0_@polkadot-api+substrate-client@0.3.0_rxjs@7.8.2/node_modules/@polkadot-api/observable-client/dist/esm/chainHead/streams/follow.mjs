import { blockHeader } from '@polkadot-api/substrate-bindings';
import { StopError } from '@polkadot-api/substrate-client';
import { connectable, Observable, Subscription, noop } from 'rxjs';

const withInitializedNumber = (getHeader) => (source$) => new Observable((observer) => {
  let pending = null;
  return source$.subscribe({
    next(event) {
      if (event.type === "initialized") {
        pending = [];
        getHeader(event.finalizedBlockHashes[0]).then((header) => {
          if (!observer.closed) {
            observer.next({
              ...event,
              number: header.number,
              parentHash: header.parentHash
            });
            pending.forEach((e) => {
              observer.next(e);
            });
            pending = null;
          }
        }).catch((e) => {
          if (!observer.closed) observer.error(e);
        });
      } else if (pending) pending.push(event);
      else observer.next(event);
    },
    error(e) {
      observer.error(e);
    },
    complete() {
      observer.complete();
    }
  });
});
const getFollow$ = (chainHead) => {
  let follower = null;
  let unfollow = noop;
  const getFollower = () => {
    if (!follower) throw new Error("Missing chainHead subscription");
    return follower;
  };
  const getHeader = (hash) => getFollower().header(hash).then(blockHeader.dec);
  const follow$ = connectable(
    new Observable((observer) => {
      follower = chainHead(
        true,
        (e) => {
          observer.next(e);
        },
        (e) => {
          follower = null;
          observer.error(e);
        }
      );
      unfollow = () => {
        observer.complete();
        follower?.unfollow();
      };
    }).pipe(withInitializedNumber(getHeader), retryChainHeadError())
  );
  const startFollow = () => {
    follow$.connect();
    return () => {
      unfollow();
    };
  };
  return {
    getHeader,
    getFollower,
    startFollow,
    follow$
  };
};
const retryChainHeadError = () => (source$) => new Observable((observer) => {
  const subscription = new Subscription();
  const subscribe = () => source$.subscribe({
    next: (v) => observer.next(v),
    error: (e) => {
      subscription.add(subscribe());
      if (e instanceof StopError) {
        observer.next({ type: "stop-error" });
      } else {
        console.warn("ChainHead follow request failed, retrying\u2026", e);
      }
    },
    complete: () => observer.complete()
  });
  subscription.add(subscribe());
  return subscription;
});

export { getFollow$ };
//# sourceMappingURL=follow.mjs.map
