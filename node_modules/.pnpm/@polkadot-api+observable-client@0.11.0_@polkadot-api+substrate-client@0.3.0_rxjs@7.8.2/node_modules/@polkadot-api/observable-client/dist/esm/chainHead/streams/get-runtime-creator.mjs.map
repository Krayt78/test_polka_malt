{"version":3,"file":"get-runtime-creator.mjs","sources":["../../../../src/chainHead/streams/get-runtime-creator.ts"],"sourcesContent":["import {\n  getDynamicBuilder,\n  getLookupFn,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  AccountId,\n  Binary,\n  Bytes,\n  Codec,\n  Decoder,\n  HexString,\n  metadata as metadataCodec,\n  Option,\n  SS58String,\n  u32,\n  UnifiedMetadata,\n  unifyMetadata,\n  Vector,\n} from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\nimport {\n  catchError,\n  EMPTY,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  shareReplay,\n  tap,\n  timer,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\n\nexport type SystemEvent = {\n  phase:\n    | { type: \"ApplyExtrinsic\"; value: number }\n    | { type: \"Finalization\" }\n    | { type: \"Initialization\" }\n  event: {\n    type: string\n    value: {\n      type: string\n      value: any\n    }\n  }\n  topics: Array<Binary>\n}\n\nexport interface RuntimeContext {\n  metadataRaw: Uint8Array\n  lookup: MetadataLookup\n  codeHash: HexString\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>\n  events: {\n    key: string\n    dec: Decoder<Array<SystemEvent>>\n  }\n  accountId: Codec<SS58String>\n  assetId: number | null\n}\n\nexport interface Runtime {\n  at: string\n  runtime: Observable<RuntimeContext>\n  addBlock: (block: string) => Runtime\n  deleteBlocks: (blocks: string[]) => number\n  usages: Set<string>\n}\n\nconst versionedArgs = (v: number) => toHex(u32.enc(v))\nconst opaqueBytes = Bytes()\nconst optionalOpaqueBytes = Option(opaqueBytes)\nconst u32ListDecoder = Vector(u32).dec\n\nexport const getRuntimeCreator = (\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  getCodeHash$: (blockHash: string) => Observable<string>,\n  getCachedMetadata: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n) => {\n  const getMetadata$ = (\n    getHash: () => string | null,\n  ): Observable<{\n    metadataRaw: Uint8Array\n    metadata: UnifiedMetadata\n    codeHash: string\n  }> => {\n    const withRecovery = <Args extends Array<any>, T>(\n      fn: (hash: string, ...args: Args) => Observable<T>,\n    ): ((...args: Args) => Observable<T>) => {\n      const result: (...args: Args) => Observable<T> = (...args) => {\n        const hash = getHash()\n        return hash\n          ? fn(hash, ...args).pipe(\n              catchError((e) => {\n                if (e instanceof BlockNotPinnedError) return result(...args)\n                if (e instanceof OperationInaccessibleError)\n                  return timer(750).pipe(mergeMap(() => result(...args)))\n                throw e\n              }),\n            )\n          : EMPTY\n      }\n      return result\n    }\n\n    const recoverCall$ = withRecovery(call$)\n    const recoverCodeHash$ = withRecovery(getCodeHash$)\n\n    const versions$ = recoverCall$(\"Metadata_metadata_versions\", \"\").pipe(\n      map(u32ListDecoder),\n      catchError(() => of([14])),\n    )\n    const versioned$ = (availableVersions: number[]) => {\n      const [v] = availableVersions\n        .filter((x) => x > 13 && x < 17)\n        .sort((a, b) => b - a)\n      return v === 14\n        ? recoverCall$(\"Metadata_metadata\", \"\").pipe(map(opaqueBytes.dec))\n        : recoverCall$(\"Metadata_metadata_at_version\", versionedArgs(v)).pipe(\n            map((x) => optionalOpaqueBytes.dec(x)!),\n          )\n    }\n    const metadataRaw$ = versions$.pipe(mergeMap(versioned$))\n\n    return recoverCodeHash$().pipe(\n      mergeMap((codeHash) =>\n        getCachedMetadata(codeHash).pipe(\n          catchError(() => of(null)),\n          mergeMap((metadataRaw) =>\n            metadataRaw\n              ? of(metadataRaw)\n              : metadataRaw$.pipe(\n                  tap((raw) => {\n                    setCachedMetadata(codeHash, raw)\n                  }),\n                ),\n          ),\n          map((metadataRaw) => ({\n            codeHash,\n            metadataRaw,\n            metadata: unifyMetadata(metadataCodec.dec(metadataRaw)),\n          })),\n        ),\n      ),\n    )\n  }\n\n  return (getHash: () => string | null): Runtime => {\n    const initialHash = getHash()!\n    const usages = new Set<string>([initialHash])\n\n    const runtimeContext$: Observable<RuntimeContext> = getMetadata$(\n      getHash,\n    ).pipe(\n      map(({ metadata, metadataRaw, codeHash }) => {\n        const lookup = getLookupFn(metadata)\n        const dynamicBuilder = getDynamicBuilder(lookup)\n        const events = dynamicBuilder.buildStorage(\"System\", \"Events\")\n\n        const assetPayment = metadata.extrinsic.signedExtensions.find(\n          (x) => x.identifier === \"ChargeAssetTxPayment\",\n        )\n\n        let assetId: null | number = null\n        if (assetPayment) {\n          const assetTxPayment = lookup(assetPayment.type)\n          if (assetTxPayment.type === \"struct\") {\n            const optionalAssetId = assetTxPayment.value.asset_id\n            if (optionalAssetId.type === \"option\")\n              assetId = optionalAssetId.value.id\n          }\n        }\n\n        return {\n          assetId,\n          metadataRaw,\n          codeHash,\n          lookup,\n          dynamicBuilder,\n          events: {\n            key: events.keys.enc(),\n            dec: events.value.dec as any,\n          },\n          accountId: AccountId(dynamicBuilder.ss58Prefix),\n        }\n      }),\n      shareReplay(1),\n    )\n\n    const result: Runtime = {\n      at: initialHash,\n      runtime: runtimeContext$,\n      addBlock: (block: string) => {\n        usages.add(block)\n        return result\n      },\n      deleteBlocks: (blocks) => {\n        blocks.forEach((block) => {\n          usages.delete(block)\n        })\n        return usages.size\n      },\n      usages,\n    }\n    runtimeContext$.subscribe({\n      error() {},\n    })\n\n    return result\n  }\n}\n"],"names":["metadataCodec"],"mappings":"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"}