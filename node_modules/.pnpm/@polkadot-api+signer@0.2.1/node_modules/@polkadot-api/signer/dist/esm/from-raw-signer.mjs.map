{"version":3,"file":"from-raw-signer.mjs","sources":["../../src/from-raw-signer.ts"],"sourcesContent":["import { mergeUint8 } from \"@polkadot-api/utils\"\nimport type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { getSignBytes, createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  Blake2256,\n  decAnyMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\n\nexport function getPolkadotSigner(\n  publicKey: Uint8Array,\n  signingType: \"Ecdsa\" | \"Ed25519\" | \"Sr25519\",\n  sign: (input: Uint8Array) => Promise<Uint8Array> | Uint8Array,\n): PolkadotSigner {\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    _: number,\n    hasher = Blake2256,\n  ) => {\n    const decMeta = unifyMetadata(decAnyMetadata(metadata))\n    const extra: Array<Uint8Array> = []\n    const additionalSigned: Array<Uint8Array> = []\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed extension`)\n      extra.push(signedExtension.value)\n      additionalSigned.push(signedExtension.additionalSigned)\n    })\n\n    const toSign = mergeUint8(callData, ...extra, ...additionalSigned)\n    const signed = await sign(toSign.length > 256 ? hasher(toSign) : toSign)\n    return createV4Tx(decMeta, publicKey, signed, extra, callData, signingType)\n  }\n\n  return {\n    publicKey,\n    signTx,\n    signBytes: getSignBytes(sign),\n  }\n}\n\nconst METADATA_IDENTIFIER = \"CheckMetadataHash\"\nconst oneU8 = Uint8Array.from([1])\n\nexport const withMetadataHash = (\n  networkInfo: Parameters<typeof merkleizeMetadata>[1],\n  base: PolkadotSigner,\n): PolkadotSigner => ({\n  ...base,\n  signTx: async (callData, signedExtensions, metadata, ...rest) =>\n    base.signTx(\n      callData,\n      signedExtensions[METADATA_IDENTIFIER]\n        ? {\n            ...signedExtensions,\n            [METADATA_IDENTIFIER]: {\n              identifier: METADATA_IDENTIFIER,\n              value: oneU8,\n              additionalSigned: mergeUint8(\n                oneU8,\n                merkleizeMetadata(metadata, networkInfo).digest(),\n              ),\n            },\n          }\n        : signedExtensions,\n      metadata,\n      ...rest,\n    ),\n})\n"],"names":[],"mappings":";;;;;AAUgB,SAAA,iBAAA,CACd,SACA,EAAA,WAAA,EACA,IACgB,EAAA;AAChB,EAAA,MAAM,SAAS,OACb,QAAA,EACA,kBAQA,QACA,EAAA,CAAA,EACA,SAAS,SACN,KAAA;AACH,IAAA,MAAM,OAAU,GAAA,aAAA,CAAc,cAAe,CAAA,QAAQ,CAAC,CAAA;AACtD,IAAA,MAAM,QAA2B,EAAC;AAClC,IAAA,MAAM,mBAAsC,EAAC;AAC7C,IAAA,OAAA,CAAQ,UAAU,gBAAiB,CAAA,GAAA,CAAI,CAAC,EAAE,YAAiB,KAAA;AACzD,MAAM,MAAA,eAAA,GAAkB,iBAAiB,UAAU,CAAA;AACnD,MAAA,IAAI,CAAC,eAAA;AACH,QAAA,MAAM,IAAI,KAAA,CAAM,CAAW,QAAA,EAAA,UAAU,CAAmB,iBAAA,CAAA,CAAA;AAC1D,MAAM,KAAA,CAAA,IAAA,CAAK,gBAAgB,KAAK,CAAA;AAChC,MAAiB,gBAAA,CAAA,IAAA,CAAK,gBAAgB,gBAAgB,CAAA;AAAA,KACvD,CAAA;AAED,IAAA,MAAM,SAAS,UAAW,CAAA,QAAA,EAAU,GAAG,KAAA,EAAO,GAAG,gBAAgB,CAAA;AACjE,IAAM,MAAA,MAAA,GAAS,MAAM,IAAK,CAAA,MAAA,CAAO,SAAS,GAAM,GAAA,MAAA,CAAO,MAAM,CAAA,GAAI,MAAM,CAAA;AACvE,IAAA,OAAO,WAAW,OAAS,EAAA,SAAA,EAAW,MAAQ,EAAA,KAAA,EAAO,UAAU,WAAW,CAAA;AAAA,GAC5E;AAEA,EAAO,OAAA;AAAA,IACL,SAAA;AAAA,IACA,MAAA;AAAA,IACA,SAAA,EAAW,aAAa,IAAI;AAAA,GAC9B;AACF;AAEA,MAAM,mBAAsB,GAAA,mBAAA;AAC5B,MAAM,KAAQ,GAAA,UAAA,CAAW,IAAK,CAAA,CAAC,CAAC,CAAC,CAAA;AAEpB,MAAA,gBAAA,GAAmB,CAC9B,WAAA,EACA,IACoB,MAAA;AAAA,EACpB,GAAG,IAAA;AAAA,EACH,QAAQ,OAAO,QAAA,EAAU,gBAAkB,EAAA,QAAA,EAAA,GAAa,SACtD,IAAK,CAAA,MAAA;AAAA,IACH,QAAA;AAAA,IACA,gBAAA,CAAiB,mBAAmB,CAChC,GAAA;AAAA,MACE,GAAG,gBAAA;AAAA,MACH,CAAC,mBAAmB,GAAG;AAAA,QACrB,UAAY,EAAA,mBAAA;AAAA,QACZ,KAAO,EAAA,KAAA;AAAA,QACP,gBAAkB,EAAA,UAAA;AAAA,UAChB,KAAA;AAAA,UACA,iBAAkB,CAAA,QAAA,EAAU,WAAW,CAAA,CAAE,MAAO;AAAA;AAClD;AACF,KAEF,GAAA,gBAAA;AAAA,IACJ,QAAA;AAAA,IACA,GAAG;AAAA;AAET,CAAA;;;;"}