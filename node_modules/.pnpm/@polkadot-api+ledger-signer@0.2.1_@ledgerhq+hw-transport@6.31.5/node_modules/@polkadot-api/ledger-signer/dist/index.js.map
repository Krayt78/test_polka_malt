{"version":3,"file":"index.js","sources":["../src/get-metadata.ts","../src/consts.ts","../src/ledger-signer.ts"],"sourcesContent":["import {\n  decAnyMetadata,\n  UnifiedMetadata,\n  unifyMetadata,\n  type HexString,\n} from \"@polkadot-api/substrate-bindings\"\n\nexport const getMetadata = (\n  input: Uint8Array | HexString,\n): UnifiedMetadata<15 | 16> => {\n  try {\n    const metadata = unifyMetadata(decAnyMetadata(input))\n    if (metadata.version <= 14) throw new Error(\"Wrong metadata version\")\n    return metadata as UnifiedMetadata<15 | 16>\n  } catch (e) {\n    throw e || new Error(\"Unable to decode metadata\")\n  }\n}\n","export const CLA = 0xf9\nexport const INS = {\n  getVersion: 0,\n  getAddress: 1,\n  signTx: 2,\n  signRaw: 3,\n}\nexport const P1 = {\n  // sign\n  init: 0,\n  continue: 1,\n  end: 2,\n\n  // addr\n  getAddress: 0,\n  showAddress: 1,\n}\nexport const P2 = {\n  ed25519: 0,\n  ecdsa: 2,\n}\nexport const PUBKEY_LEN = {\n  ed25519: 32,\n  ecdsa: 33,\n}\nexport const SIGN_LEN = {\n  ed25519: 64,\n  ecdsa: 65,\n}\nexport const DEFAULT_SS58 = 0\n","import type Transport from \"@ledgerhq/hw-transport\"\nimport { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\nimport type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport {\n  Binary,\n  ethAccount,\n  HexString,\n  u16,\n  u32,\n} from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8 } from \"@polkadot-api/utils\"\nimport { getMetadata } from \"./get-metadata\"\nimport { CLA, DEFAULT_SS58, INS, P1, P2, PUBKEY_LEN, SIGN_LEN } from \"./consts\"\nimport { getSignBytes, createV4Tx } from \"@polkadot-api/signers-common\"\n\nconst METADATA_IDENTIFIER = \"CheckMetadataHash\"\n\n// 44'/354'\nconst START_PATH = Uint8Array.from([44, 0, 0, 128, 98, 1, 0, 128])\n// 0'\nconst MID_PATH = Uint8Array.from([0, 0, 0, 128])\nconst HARDENED = 0x80000000 // 1 << 31\nconst encodePath = (path1: number, path2: number) => {\n  // ensure numbers are positive integers and fit in 31 bits\n  if (\n    !Number.isInteger(path1) ||\n    path1 < 0 ||\n    path1 >= HARDENED ||\n    !Number.isInteger(path2) ||\n    path2 < 0 ||\n    path2 >= HARDENED\n  )\n    throw new Error(`Invalid path segments ${path1}, ${path2}`)\n\n  return mergeUint8(\n    START_PATH,\n    u32.enc(HARDENED + path1),\n    MID_PATH,\n    u32.enc(HARDENED + path2),\n  )\n}\n\n/**\n * ATTENTION: This class requires `Buffer` to be available. This is an Ledger\n * requirement that we need to fulfill. If you are on a browser-based\n * environment, make sure you polyfill it.\n */\nexport class LedgerSigner {\n  readonly #transport: Transport\n  readonly #schema: \"ed25519\" | \"ecdsa\"\n  #pubkeys: Map<string, Promise<Uint8Array>> // `${schema}:${path1}:${path2}, pubkey|addr`\n  #deviceId: Promise<number> | null\n  #appInfo: ReturnType<typeof this.appInfo> | null\n  #verified: Promise<void> | null\n\n  /**\n   * @param transport           Valid and opened transport.\n   * @param [schema=\"ed25519\"]  Signing schema to use. Default: `ed25519`.\n   */\n  constructor(transport: Transport, schema: \"ed25519\" | \"ecdsa\" = \"ed25519\") {\n    this.#deviceId = null\n    this.#appInfo = null\n    this.#verified = null\n    this.#transport = transport\n    this.#schema = schema\n    this.#pubkeys = new Map()\n  }\n\n  async #send(\n    ...params: Parameters<Transport[\"send\"]>\n  ): ReturnType<Transport[\"send\"]> {\n    while (this.#transport.exchangeBusyPromise)\n      await this.#transport.exchangeBusyPromise\n    return await this.#transport.send(...params)\n  }\n\n  async #safeSend(\n    ...params: Parameters<Transport[\"send\"]>\n  ): ReturnType<Transport[\"send\"]> {\n    if (!this.#verified)\n      this.#verified = this.appInfo().then(({ appName, appVersion }) => {\n        if (appName !== \"Polkadot\")\n          throw new Error(\"Polkadot App is not opened\")\n        const version = appVersion.split(\".\").map((v) => parseInt(v))\n        if (\n          // from version 100 it is Polkadot Generic App\n          version[0] < 100 ||\n          // ecdsa was only released on 100.0.12\n          (version[0] === 100 && version[1] === 0 && version[2] < 12)\n        )\n          throw new Error(`Polkadot App version ${appVersion} not expected`)\n      })\n    await this.#verified\n    return await this.#send(...params)\n  }\n\n  /**\n   * Retrieve running app from device.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @returns App name and version.\n   * @throws This could throw if the device is not connected, locked, etc.\n   */\n  async appInfo(): Promise<{\n    appName: string\n    appVersion: string\n  }> {\n    // this message is common among Ledger, not only Polkadot app\n    if (!this.#appInfo)\n      this.#appInfo = this.#send(0xb0, 1, 0, 0).then((v) => {\n        const res = Uint8Array.from(v)\n        const appName = Binary.fromBytes(res.slice(2, 2 + res[1])).asText()\n        const appVersion = Binary.fromBytes(\n          res.slice(2 + res[1] + 1, 2 + res[1] + 1 + res[2 + res[1]]),\n        ).asText()\n        return { appName, appVersion }\n      })\n    return this.#appInfo\n  }\n\n  /**\n   * Get unique identifier of the seed phrase. It is useful to uniquely identify\n   * each device/seed that is connected.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @returns DeviceId.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async deviceId(): Promise<number> {\n    if (!this.#deviceId)\n      this.#deviceId = this.#getPublicKeyAndAddr(0, 0).then((v) =>\n        u32.dec(v.slice(0, 4)),\n      )\n    return this.#deviceId\n  }\n\n  async #getPublicKeyAndAddr(\n    path1: number,\n    path2: number,\n    seeAddressInDevice?: boolean,\n    ss58Prefix?: number,\n  ): Promise<Uint8Array> {\n    const key = `${this.#schema}:${path1}:${path2}`\n    if (!seeAddressInDevice && this.#pubkeys.has(key))\n      return this.#pubkeys.get(key)!\n    if (\n      ss58Prefix != null &&\n      (!Number.isInteger(ss58Prefix) || ss58Prefix < 0 || ss58Prefix >= 1 << 16) // u16 max value\n    )\n      throw new Error(`Invalid ss58Prefix ${ss58Prefix}`)\n    const bufToSend = Buffer.from(\n      // id + ss58 prefix\n      mergeUint8(\n        encodePath(path1, path2),\n        Uint8Array.from(u16.enc(ss58Prefix ?? DEFAULT_SS58)),\n      ),\n    )\n    const prom = this.#safeSend(\n      CLA,\n      INS.getAddress,\n      seeAddressInDevice ? P1.showAddress : P1.getAddress,\n      P2[this.#schema],\n      bufToSend,\n    ).then((v) => Uint8Array.from(v).slice(0, -2)) // remove return code\n    this.#pubkeys.set(key, prom)\n    return prom\n  }\n\n  /**\n   * Get pubkey for a specific derivation path.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param path1  Primary derivation index.\n   * @param path2  Secondary derivation index. Defaults to 0.\n   * @returns Public key.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async getPubkey(path1: number, path2: number = 0): Promise<Uint8Array> {\n    return await this.#getPublicKeyAndAddr(path1, path2).then((v) =>\n      v.slice(0, PUBKEY_LEN[this.#schema]),\n    )\n  }\n\n  /**\n   * Show address in device's screen.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param ss58Prefix  SS58 prefix for address formatting. This is only\n   *                    relevant for `ed25519` schema.\n   * @param path1       Primary derivation index.\n   * @param path2       Secondary derivation index. Defaults to 0.\n   * @returns Public key.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async seeAddressInDevice(\n    ss58Prefix: number,\n    path1: number,\n    path2: number = 0,\n  ): Promise<Uint8Array> {\n    return await this.#getPublicKeyAndAddr(path1, path2, true, ss58Prefix).then(\n      (v) => v.slice(0, PUBKEY_LEN[this.#schema]),\n    )\n  }\n\n  /**\n   * Get `AccountId20` (ETH-like) for a specific derivation path.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param path1  Primary derivation index.\n   * @param path2  Secondary derivation index. Defaults to 0.\n   * @returns AccountId20.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc. It throws as well if the\n   *         schema is `ed25519`.\n   */\n  async getAddress20(path1: number, path2: number = 0): Promise<HexString> {\n    if (this.#schema !== \"ecdsa\")\n      throw new Error(\"This method only supports `ecdsa` schema.\")\n    return await this.#getPublicKeyAndAddr(path1, path2).then((v) =>\n      ethAccount.dec(v.slice(PUBKEY_LEN[this.#schema])),\n    )\n  }\n\n  async #sign(\n    path1: number,\n    path2: number,\n    payload: Uint8Array,\n    // without shortMetadata indicates signBytes\n    shortMetadata?: Uint8Array,\n  ): Promise<Uint8Array> {\n    const path = encodePath(path1, path2)\n    const chunks: Buffer[] = []\n    chunks.push(Buffer.from(mergeUint8(path, u16.enc(payload.length))))\n    const combinedPayload =\n      shortMetadata == null ? payload : mergeUint8(payload, shortMetadata)\n    let offset = 0\n    while (offset < combinedPayload.length) {\n      const chunkEnd = Math.min(offset + 250, combinedPayload.length)\n      chunks.push(Buffer.from(combinedPayload.slice(offset, chunkEnd)))\n      offset = chunkEnd\n    }\n    let result\n    for (let i = 0; i < chunks.length; i++) {\n      result = await this.#safeSend(\n        CLA,\n        shortMetadata == null ? INS.signRaw : INS.signTx,\n        i === 0 ? P1.init : i === chunks.length - 1 ? P1.end : P1.continue,\n        P2[this.#schema],\n        chunks[i],\n      )\n    }\n    if (result == null) throw null\n\n    // remove return code\n    return Uint8Array.from(result).slice(\n      0,\n      // ed25519 includes as well a `0x00` at the beginning\n      SIGN_LEN[this.#schema] + (this.#schema === \"ed25519\" ? 1 : 0),\n    )\n  }\n\n  /**\n   * Create PolkadotSigner object from a specific derivation path and for a\n   * specific network.\n   *\n   * This call prevents race conditions and waits until the device is free to\n   * receive new messages.\n   *\n   * @param networkInfo  Off-chain info required to sign transactions. This\n   *                     makes this object be network-specific.\n   * @param path1        Primary derivation index.\n   * @param path2        Secondary derivation index. Defaults to 0.\n   * @returns PolkadotSigner object.\n   * @throws This could throw if the device is not connected, locked, in a\n   *         different app than Polkadot, etc.\n   */\n  async getPolkadotSigner(\n    networkInfo: { decimals: number; tokenSymbol: string },\n    path1: number,\n    path2: number = 0,\n  ): Promise<PolkadotSigner> {\n    // ed25519 has public key, ecdsa has addr (20 bytes)\n    const publicKey = await this.#getPublicKeyAndAddr(path1, path2).then((v) =>\n      this.#schema === \"ed25519\"\n        ? v.slice(0, PUBKEY_LEN[this.#schema])\n        : v.slice(PUBKEY_LEN[this.#schema]),\n    )\n    const signTx: PolkadotSigner[\"signTx\"] = async (\n      callData,\n      signedExtensions,\n      metadata,\n    ) => {\n      const merkleizer = merkleizeMetadata(metadata, networkInfo)\n      const digest = merkleizer.digest()\n      const meta = getMetadata(metadata)\n      if (\n        meta.extrinsic.signedExtensions.find(\n          ({ identifier }) => identifier === METADATA_IDENTIFIER,\n        ) == null\n      )\n        throw new Error(\"No `CheckMetadataHash` sigExt found\")\n      const extra: Array<Uint8Array> = []\n      const additionalSigned: Array<Uint8Array> = []\n      meta.extrinsic.signedExtensions.map(({ identifier }) => {\n        if (identifier === METADATA_IDENTIFIER) {\n          extra.push(Uint8Array.from([1]))\n          additionalSigned.push(mergeUint8(Uint8Array.from([1]), digest))\n          return\n        }\n        const signedExtension = signedExtensions[identifier]\n        if (!signedExtension)\n          throw new Error(`Missing ${identifier} signed extension`)\n        extra.push(signedExtension.value)\n        additionalSigned.push(signedExtension.additionalSigned)\n      })\n      const toSign = mergeUint8(callData, ...extra, ...additionalSigned)\n      const signature = await this.#sign(\n        path1,\n        path2,\n        toSign,\n        merkleizer.getProofForExtrinsicPayload(toSign),\n      )\n      return createV4Tx(meta, publicKey, signature, extra, callData)\n    }\n\n    return {\n      publicKey,\n      signTx,\n      signBytes: getSignBytes(async (x) =>\n        // the signature includes a \"0x00\" at the beginning, indicating a ed25519 signature, ecdsa do not\n        // this is not needed for non-extrinsic signatures\n        (await this.#sign(path1, path2, x)).slice(\n          this.#schema === \"ed25519\" ? 1 : 0,\n        ),\n      ),\n    }\n  }\n}\n"],"names":["unifyMetadata","decAnyMetadata","mergeUint8","u32","Binary","ethAccount","merkleizeMetadata","createV4Tx","getSignBytes","u16"],"mappings":"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"}