var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .papi/descriptors/src/descriptors.ts
var descriptors_exports = {};
__export(descriptors_exports, {
  Paseo: () => Paseo,
  Paseo_asset_hub: () => Paseo_asset_hub,
  Polkadot: () => Polkadot,
  Polkadot_asset_hub: () => Polkadot_asset_hub
});
var minified, commonTrees, tokens, replaceTokens, tokenizedCommonTrees, unwrap, getChainDescriptors, Paseo, Paseo_asset_hub, Polkadot, Polkadot_asset_hub;
var init_descriptors = __esm({
  ".papi/descriptors/src/descriptors.ts"() {
    [minified, commonTrees, tokens] = JSON.parse(`[{"paseo":{"350":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":8,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":{"19":1,"20":31,"21":32,"22":33},"27":0,"45":1,"48":2,"50":3,"57":4,"60":5,"62":6,"106":7,"109":8,"112":9,"118":10,"125":11,"127":12,"134":{"128":1,"129":173,"130":55,"131":121,"132":1,"133":174},"137":13,"143":{"138":1,"139":199,"140":200,"141":106,"142":4},"144":14,"146":15,"147":16,"149":17,"152":14,"155":18,"157":19,"159":{"158":1,"159":263,"160":5,"161":121},"164":{"162":1,"163":106,"164":275,"165":112,"ChildBountyDescriptions":5},"176":20,"180":21,"202":22,"207":23,"212":24,"213":14,"217":25,"222":{"218":1,"219":121,"220":172,"221":370},"224":{"223":371},"227":{"225":375,"226":376},"231":{"228":378,"229":1,"230":380,"AvailabilityCores":379},"253":26,"256":27,"260":28,"273":29,"279":30,"284":31,"286":32,"292":33,"295":34,"298":35,"300":36,"305":37,"310":38,"311":14,"315":39,"330":40,"334":41,"336":{"335":539},"339":42,"343":43,"346":44,"347":14,"349":45},"658":{"18":63,"23":{"362":35,"363":36,"364":37,"365":38,"366":39,"367":40,"368":41,"369":42,"370":43,"371":38},"27":64,"45":65,"48":66,"50":67,"57":68,"60":14,"62":14,"106":69,"109":14,"112":14,"118":70,"125":71,"127":14,"134":{"428":176,"429":177,"430":178,"431":68,"432":68,"433":68},"137":72,"143":{"363":68,"440":202,"441":68,"442":68,"443":68,"444":68,"445":203,"446":68,"447":204},"144":14,"146":{"448":211,"449":211,"450":212,"451":213},"147":73,"149":74,"152":{"462":235,"463":236,"464":235,"465":237,"466":235,"467":238},"155":{"468":244,"469":245,"470":245,"471":128,"472":246,"473":247,"474":248,"475":248,"476":249,"477":250},"157":{"478":255,"479":256,"480":257,"481":258},"159":{"482":265,"483":266,"484":267,"485":266,"486":266,"487":268,"488":266,"489":266,"490":269},"164":75,"176":76,"180":77,"202":78,"207":79,"212":14,"213":14,"217":{"525":130,"526":130,"527":130,"528":130,"529":130,"530":130,"531":130,"532":130,"533":130,"534":130,"535":363,"536":363,"537":130,"538":130,"539":130,"540":130,"541":130,"542":130,"543":130,"544":130,"545":130,"546":130,"547":130,"548":130,"549":130,"550":364,"551":364,"552":130,"553":130,"554":130,"555":130,"556":130,"557":130,"558":130,"559":130,"560":365,"561":366,"562":367,"563":364,"564":130,"565":130,"566":130,"567":130,"568":368,"569":130,"570":369,"set_max_availability_timeouts":130,"set_on_demand_ttl":130},"222":14,"224":14,"227":{"571":377},"231":14,"253":80,"256":81,"260":14,"273":82,"279":14,"284":83,"286":84,"292":85,"295":14,"298":86,"300":87,"305":88,"310":89,"311":90,"315":91,"330":92,"334":93,"336":{"505":540,"644":540,"645":541},"339":94,"343":14,"346":14,"347":{"sudo_schedule_para_initialize":552,"sudo_schedule_para_cleanup":446,"sudo_schedule_parathread_upgrade":446,"sudo_schedule_parachain_downgrade":446,"sudo_queue_downward_xcm":553,"sudo_establish_hrmp_channel":417},"349":{"653":213,"654":238,"655":554,"656":555,"657":128}},"897":{"18":{"659":24,"660":25,"661":26,"662":27,"663":27,"664":28,"665":29},"23":{"666":44,"667":44,"668":45,"669":46,"670":47,"671":47,"672":47,"673":47,"674":47},"27":107,"45":14,"48":14,"50":108,"57":109,"60":110,"62":14,"106":{"66":150,"93":156,"690":147,"703":145,"704":146,"705":148,"706":149,"707":26,"708":150,"709":150,"710":151,"711":26,"712":152,"713":153,"714":154,"715":155,"716":155,"717":157},"109":111,"112":14,"118":112,"125":113,"127":14,"134":{"688":183,"723":179,"724":180,"725":181,"726":182,"727":184,"728":185,"729":186,"730":72,"731":187,"732":187,"733":72},"137":114,"143":115,"144":14,"146":{"754":214,"755":214,"756":215},"147":116,"149":117,"152":{"760":239,"761":26,"762":26,"763":26,"764":240,"765":241},"155":{"766":241,"767":251,"768":252,"769":253,"770":253},"157":{"771":259,"772":260,"773":261,"774":262},"159":118,"164":119,"176":120,"180":121,"202":122,"207":{"690":150,"808":356,"809":357,"810":155,"811":26},"212":123,"213":14,"217":14,"222":14,"224":{"814":372,"815":372,"816":373,"817":374},"227":14,"231":14,"253":124,"256":14,"260":14,"273":125,"279":14,"284":126,"286":14,"292":127,"295":14,"298":128,"300":129,"305":130,"310":{"793":449,"848":473,"849":473,"850":449,"851":449,"852":449,"853":474,"854":449,"855":475,"856":449},"311":131,"315":132,"330":133,"334":134,"336":{"890":542,"891":543,"892":544},"339":14,"343":14,"346":14,"347":14,"349":{"893":556,"894":557,"895":26,"896":556}},"995":{"18":147,"23":148,"27":14,"45":149,"48":150,"50":151,"57":152,"60":153,"62":14,"106":154,"109":14,"112":14,"118":14,"125":155,"127":14,"134":156,"137":157,"143":158,"144":14,"146":14,"147":159,"149":160,"152":161,"155":162,"157":163,"159":164,"164":165,"176":166,"180":167,"202":168,"207":151,"212":169,"213":14,"217":14,"222":14,"224":14,"227":14,"231":14,"253":170,"256":14,"260":14,"273":14,"279":14,"284":14,"286":14,"292":171,"295":14,"298":172,"300":173,"305":174,"310":175,"311":{"988":1,"989":476},"315":176,"330":14,"334":177,"336":14,"339":155,"343":14,"346":14,"347":14,"349":14},"996":{"18":14,"23":14,"27":14,"45":14,"48":14,"50":14,"57":14,"60":14,"62":14,"106":14,"109":14,"112":14,"118":14,"125":14,"127":14,"134":14,"137":14,"143":14,"144":14,"146":14,"147":14,"149":14,"152":14,"155":14,"157":14,"159":14,"164":14,"176":14,"180":14,"202":14,"207":14,"212":14,"213":14,"217":14,"222":14,"224":14,"227":14,"231":14,"253":14,"256":14,"260":14,"273":14,"279":14,"284":14,"286":14,"292":14,"295":14,"298":14,"300":14,"305":14,"310":14,"311":14,"315":14,"330":14,"334":14,"336":14,"339":14,"343":14,"346":14,"347":14,"349":14},"1115":{"196":186,"998":187,"1002":188,"1010":{"1006":565,"1007":566,"1008":567,"1009":568},"1020":{"1011":569,"1012":570,"1013":571,"1014":572,"1015":573,"1016":574,"1017":575,"1018":569,"1019":572},"1023":189,"1025":190,"1027":191,"1059":{"1028":581,"1029":582,"1030":583,"1031":584,"1032":585,"1033":586,"1034":587,"1035":588,"1036":589,"1037":590,"1038":591,"1039":592,"1040":593,"1041":594,"1042":595,"1043":596,"1044":581,"1045":597,"1046":598,"1047":599,"1048":600,"1049":601,"1050":602,"1051":587,"1052":603,"1053":604,"1054":564,"1055":605,"1056":587,"1057":606,"1058":607},"1067":192,"1073":193,"1076":194,"1080":195,"1085":196,"1087":197,"1090":198,"1092":199,"1097":200,"1100":{"1095":634,"1096":635,"1098":636,"1099":637},"1105":201,"1108":{"1106":642,"1107":643},"1110":202,"1114":203}},"paseo_asset_hub":{"350":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":648,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"48":2,"57":46,"60":5,"62":6,"118":47,"149":17,"152":14,"155":48,"157":19,"315":39,"334":49,"349":45,"1139":50,"1141":51,"1142":14,"1147":52,"1148":53,"1150":54,"1157":55,"1158":40,"1159":14,"1161":56,"1164":57,"1173":58,"1185":59,"1186":60,"1187":57,"1190":61},"658":{"18":63,"48":66,"57":68,"60":14,"62":14,"118":95,"149":74,"152":{"462":705,"463":706,"464":705,"465":707,"466":705,"467":708},"155":{"468":716,"469":717,"470":717,"471":128,"472":718,"473":719,"474":248,"475":248,"476":249,"477":720},"157":{"478":712,"479":713,"480":257,"481":258},"315":91,"334":96,"349":{"653":913,"654":708,"655":554,"656":914,"657":128},"1139":97,"1141":14,"1142":14,"1147":98,"1148":14,"1150":14,"1157":99,"1158":92,"1159":14,"1161":100,"1164":101,"1173":102,"1185":103,"1186":104,"1187":101,"1190":105},"897":{"18":{"659":24,"660":649,"661":26,"662":27,"663":27,"664":28,"665":29},"48":14,"57":109,"60":110,"62":14,"118":112,"149":117,"152":{"760":709,"761":26,"762":26,"763":26,"764":710,"765":711},"155":{"766":711,"767":721,"768":252,"769":722,"770":722},"157":{"771":259,"772":260,"773":714,"774":262},"315":132,"334":135,"349":{"893":915,"894":557,"895":26,"896":915},"1139":136,"1141":14,"1142":137,"1147":138,"1148":14,"1150":14,"1157":139,"1158":133,"1159":{"1286":691,"1287":691,"1288":692},"1161":140,"1164":141,"1173":142,"1185":143,"1186":144,"1187":141,"1190":145},"995":{"18":147,"48":150,"57":152,"60":153,"62":14,"118":14,"149":160,"152":161,"155":162,"157":163,"315":176,"334":177,"349":14,"1139":178,"1141":14,"1142":14,"1147":14,"1148":179,"1150":14,"1157":180,"1158":14,"1159":14,"1161":14,"1164":181,"1173":182,"1185":183,"1186":181,"1187":181,"1190":184},"996":{"18":14,"48":14,"57":14,"60":14,"62":14,"118":14,"149":14,"152":14,"155":14,"157":14,"315":14,"334":14,"349":14,"1139":14,"1141":14,"1142":14,"1147":14,"1148":14,"1150":14,"1157":14,"1158":14,"1159":14,"1161":14,"1164":14,"1173":14,"1185":14,"1186":14,"1187":14,"1190":14},"1115":{"196":186,"1002":188,"1010":{"1006":917,"1007":566,"1008":567,"1009":568},"1025":190,"1027":191,"1090":198,"1092":199,"1097":200,"1100":{"1095":634,"1096":635,"1098":918,"1099":919},"1105":201,"1108":{"1106":920,"1107":921},"1110":202,"1114":203,"1376":204,"1378":205,"1380":{"1379":922},"1382":206,"1386":207}},"polkadot":{"350":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":926,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":{"19":1,"20":929,"21":32,"22":33},"27":0,"45":1,"48":2,"50":3,"57":4,"60":5,"62":6,"106":7,"109":8,"112":9,"118":10,"125":11,"127":12,"134":{"128":1,"129":173,"130":55,"131":121,"132":1,"133":936,"LastSpendPeriod":1},"137":13,"143":{"138":1,"139":939,"140":200,"141":106,"142":4},"144":14,"146":15,"147":16,"149":17,"152":14,"155":18,"157":19,"159":{"158":1,"159":955,"160":5,"161":121},"164":{"162":1,"163":106,"164":275,"165":112,"ParentTotalChildBounties":106,"ChildBountyDescriptionsV1":956,"V0ToV1ChildBountyIds":957},"176":20,"180":21,"202":22,"207":23,"212":24,"213":14,"217":25,"222":{"218":1,"219":121,"220":172,"221":959},"224":{"223":960},"227":{"225":375,"226":963},"231":{"228":378,"229":1,"230":965},"253":26,"256":27,"260":28,"273":29,"279":30,"284":31,"286":32,"292":33,"295":34,"298":35,"300":36,"305":37,"310":38,"311":14,"315":39,"330":62,"334":41,"336":{"335":997},"339":42,"343":43,"346":44},"658":{"18":63,"23":{"362":930,"363":36,"364":931,"365":38,"366":932,"367":933,"368":41,"369":42,"370":43,"371":38},"27":64,"45":65,"48":66,"50":67,"57":68,"60":14,"62":14,"106":69,"109":14,"112":14,"118":70,"125":71,"127":14,"134":{"428":176,"429":177,"430":937,"431":68,"432":68,"433":68},"137":72,"143":{"363":68,"440":940,"441":68,"442":68,"443":68,"444":68,"445":203,"446":68,"447":204},"144":14,"146":{"448":211,"449":211,"450":212,"451":941},"147":73,"149":74,"152":{"462":943,"463":944,"464":943,"465":945,"466":943,"467":946},"155":{"468":950,"469":245,"470":245,"471":128,"472":246,"473":247,"474":248,"475":248,"476":249,"477":951},"157":{"478":952,"479":953,"480":257,"481":258},"159":{"482":265,"483":266,"484":267,"485":266,"486":266,"487":268,"488":266,"489":266,"490":269,"approve_bounty_with_curator":267},"164":75,"176":76,"180":77,"202":78,"207":79,"212":14,"213":14,"217":{"525":130,"526":130,"527":130,"528":130,"529":130,"530":130,"531":130,"532":130,"533":130,"534":130,"535":363,"536":363,"537":130,"538":130,"539":130,"540":130,"541":130,"542":130,"543":130,"544":130,"545":130,"546":130,"547":130,"548":130,"549":130,"550":364,"551":364,"552":130,"553":130,"554":130,"555":130,"556":130,"557":130,"558":130,"559":130,"560":365,"561":366,"562":367,"563":364,"564":130,"565":130,"566":130,"567":130,"568":368,"569":130,"570":369},"222":14,"224":14,"227":{"571":964},"231":14,"253":80,"256":81,"260":14,"273":82,"279":14,"284":83,"286":84,"292":85,"295":14,"298":86,"300":87,"305":88,"310":89,"311":90,"315":91,"330":106,"334":93,"336":{"505":998,"644":998,"645":999},"339":94,"343":14,"346":14},"897":{"18":{"659":24,"660":928,"661":26,"662":27,"663":27,"664":28,"665":29},"23":{"666":44,"667":44,"668":934,"669":46,"670":47,"671":47,"672":47,"673":47,"674":47},"27":107,"45":14,"48":14,"50":108,"57":109,"60":110,"62":14,"106":{"66":150,"93":156,"690":147,"703":145,"704":146,"705":148,"706":149,"707":26,"708":150,"709":150,"710":151,"711":26,"712":152,"713":935,"714":154,"715":155,"716":155,"717":157},"109":111,"112":14,"118":112,"125":113,"127":14,"134":{"688":183,"723":179,"724":180,"725":181,"726":182,"727":184,"728":185,"729":938,"730":72,"731":187,"732":187,"733":72},"137":114,"143":115,"144":14,"146":{"754":214,"755":214,"756":942},"147":116,"149":117,"152":{"760":947,"761":26,"762":26,"763":26,"764":948,"765":949},"155":{"766":949,"767":251,"768":252,"769":253,"770":253},"157":{"771":259,"772":260,"773":954,"774":262},"159":118,"164":119,"176":120,"180":121,"202":122,"207":{"690":150,"808":958,"809":357,"810":155,"811":26},"212":123,"213":14,"217":14,"222":14,"224":{"814":961,"815":961,"816":962,"817":374},"227":14,"231":14,"253":124,"256":14,"260":14,"273":125,"279":14,"284":126,"286":14,"292":127,"295":14,"298":128,"300":129,"305":130,"310":{"793":449,"848":473,"849":473,"850":449,"851":449,"852":449,"853":966,"854":449,"855":475,"856":449},"311":131,"315":132,"330":146,"334":134,"336":{"890":1000,"891":1001,"892":1002},"339":14,"343":14,"346":14},"995":{"18":185,"23":148,"27":14,"45":149,"48":150,"50":151,"57":152,"60":153,"62":14,"106":154,"109":14,"112":14,"118":14,"125":155,"127":14,"134":156,"137":157,"143":158,"144":14,"146":14,"147":159,"149":160,"152":161,"155":162,"157":163,"159":164,"164":165,"176":166,"180":167,"202":168,"207":151,"212":169,"213":14,"217":14,"222":14,"224":14,"227":14,"231":14,"253":170,"256":14,"260":14,"273":14,"279":14,"284":14,"286":14,"292":171,"295":14,"298":172,"300":173,"305":174,"310":175,"311":{"988":1,"989":967},"315":176,"330":14,"334":177,"336":14,"339":155,"343":14,"346":14},"996":{"18":14,"23":14,"27":14,"45":14,"48":14,"50":14,"57":14,"60":14,"62":14,"106":14,"109":14,"112":14,"118":14,"125":14,"127":14,"134":14,"137":14,"143":14,"144":14,"146":14,"147":14,"149":14,"152":14,"155":14,"157":14,"159":14,"164":14,"176":14,"180":14,"202":14,"207":14,"212":14,"213":14,"217":14,"222":14,"224":14,"227":14,"231":14,"253":14,"256":14,"260":14,"273":14,"279":14,"284":14,"286":14,"292":14,"295":14,"298":14,"300":14,"305":14,"310":14,"311":14,"315":14,"330":14,"334":14,"336":14,"339":14,"343":14,"346":14},"1115":{"196":186,"998":187,"1002":208,"1010":{"1006":1004,"1007":566,"1008":567,"1009":568},"1020":{"1011":569,"1012":570,"1013":571,"1014":572,"1015":573,"1016":574,"1017":575,"1018":569,"1019":572,"pool_accounts":1005},"1023":189,"1025":209,"1027":191,"1059":{"1028":581,"1029":582,"1030":1007,"1031":584,"1032":585,"1033":586,"1034":587,"1035":588,"1036":1008,"1037":1009,"1038":591,"1039":592,"1040":593,"1041":1010,"1042":595,"1043":596,"1044":581,"1045":597,"1046":598,"1047":599,"1048":600,"1049":601,"1050":602,"1051":587,"1052":1011,"1053":604,"1054":564,"1055":605,"1056":587,"1057":606,"1058":1012,"validation_code_bomb_limit":587},"1067":192,"1073":193,"1076":194,"1080":195,"1085":196,"1087":197,"1090":198,"1092":199,"1097":200,"1100":{"1095":634,"1096":635,"1098":1013,"1099":1014},"1105":210,"1108":{"1106":1019,"1107":1020},"1110":211,"1114":203}},"polkadot_asset_hub":{"350":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":1022,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"48":2,"57":46,"60":5,"62":6,"118":47,"149":17,"152":14,"155":48,"157":19,"315":39,"334":49,"1139":50,"1141":51,"1142":14,"1147":52,"1148":53,"1150":54,"1157":55,"1158":62,"1159":14,"1161":56,"1164":57,"1173":58,"1185":59,"1186":60,"1187":57,"1190":61},"658":{"18":63,"48":66,"57":68,"60":14,"62":14,"118":95,"149":74,"152":{"462":1025,"463":1026,"464":1025,"465":1027,"466":1025,"467":1028},"155":{"468":1035,"469":717,"470":717,"471":128,"472":718,"473":719,"474":248,"475":248,"476":249,"477":1036},"157":{"478":1032,"479":1033,"480":257,"481":258},"315":91,"334":96,"1139":97,"1141":14,"1142":14,"1147":98,"1148":14,"1150":14,"1157":99,"1158":106,"1159":14,"1161":100,"1164":101,"1173":102,"1185":103,"1186":104,"1187":101,"1190":105},"897":{"18":{"659":24,"660":1023,"661":26,"662":27,"663":27,"664":28,"665":29},"48":14,"57":109,"60":110,"62":14,"118":112,"149":117,"152":{"760":1029,"761":26,"762":26,"763":26,"764":1030,"765":1031},"155":{"766":1031,"767":721,"768":252,"769":722,"770":722},"157":{"771":259,"772":260,"773":1034,"774":262},"315":132,"334":135,"1139":136,"1141":14,"1142":137,"1147":138,"1148":14,"1150":14,"1157":139,"1158":146,"1159":{"1286":691,"1287":691,"1288":1024},"1161":140,"1164":141,"1173":142,"1185":143,"1186":144,"1187":141,"1190":145},"995":{"18":185,"48":150,"57":152,"60":153,"62":14,"118":14,"149":160,"152":161,"155":162,"157":163,"315":176,"334":177,"1139":178,"1141":14,"1142":14,"1147":14,"1148":179,"1150":14,"1157":180,"1158":14,"1159":14,"1161":14,"1164":181,"1173":182,"1185":183,"1186":181,"1187":181,"1190":184},"996":{"18":14,"48":14,"57":14,"60":14,"62":14,"118":14,"149":14,"152":14,"155":14,"157":14,"315":14,"334":14,"1139":14,"1141":14,"1142":14,"1147":14,"1148":14,"1150":14,"1157":14,"1158":14,"1159":14,"1161":14,"1164":14,"1173":14,"1185":14,"1186":14,"1187":14,"1190":14},"1115":{"196":186,"1002":208,"1010":{"1006":1037,"1007":566,"1008":567,"1009":568},"1025":209,"1027":191,"1090":198,"1092":199,"1097":200,"1100":{"1095":634,"1096":635,"1098":1038,"1099":1039},"1105":210,"1108":{"1106":1040,"1107":1041},"1110":211,"1114":203,"1376":204,"1378":205,"1380":{"1379":1042},"1382":206,"1386":207}}},[{"24":48,"25":49,"26":50},{"28":55,"29":56,"30":55,"31":55,"32":6,"33":57,"34":6,"35":56,"36":1,"37":58,"38":59,"39":60,"40":61,"41":1,"42":62,"43":62,"44":63},{"46":55,"47":2},{"49":67},{"0":73,"51":55,"52":55,"53":74,"54":75,"55":76,"56":77},{"58":55,"59":95},{"61":97},{"63":1,"64":1,"65":98,"66":99,"67":55,"68":55,"69":55,"70":1,"71":100,"72":101,"73":102,"74":1,"75":1,"76":103,"77":1,"78":104,"79":1,"80":1,"81":1,"82":105,"83":106,"84":107,"85":108,"86":107,"87":109,"88":110,"89":111,"90":112,"91":113,"92":112,"93":114,"94":1,"95":1,"96":55,"97":115,"98":116,"99":117,"100":118,"101":119,"102":120,"103":1,"104":121,"105":1},{"107":158,"108":159},{"110":161,"111":61},{"73":98,"104":121,"113":1,"114":2,"115":162,"116":163,"117":164},{"29":56,"119":166,"120":167,"121":1,"122":61,"123":55,"124":168},{"116":172,"126":172},{"135":188,"136":189},{},{"145":210},{"147":216,"148":55,"149":217,"150":218,"151":219},{"59":228,"149":227},{"153":242,"154":243},{"156":254},{"166":1,"167":283,"168":284,"169":285,"170":1,"171":286,"172":1,"173":287,"174":288,"175":289},{"177":299,"178":1,"179":300},{"181":55,"182":55,"183":55,"184":1,"185":1,"186":1,"187":1,"188":308,"189":1,"190":309,"191":1,"192":310,"193":1,"194":311,"195":1,"196":5,"197":1,"198":1,"199":312,"200":1,"201":313},{"203":353,"204":354,"205":1,"206":1},{"208":358,"209":1,"210":359,"211":1},{"214":361,"215":362,"216":2},{"232":381,"233":172,"234":121,"235":382,"236":5,"237":106,"238":4,"239":383,"240":384,"241":116,"242":106,"243":116,"244":4,"245":385,"246":386,"247":116,"248":116,"249":387,"250":388,"251":389,"252":390},{"254":375,"255":402},{"257":404,"258":4,"259":112},{"261":405,"262":406,"263":106,"264":106,"265":407,"266":406,"267":106,"268":408,"269":387,"270":387,"271":409,"272":410},{"274":172,"275":1,"276":423,"277":424,"278":425},{"225":428,"280":1,"281":426,"282":427,"283":429},{"97":432,"285":106},{"287":434,"288":435,"289":436,"290":437,"291":301},{"293":441,"294":442},{"253":443,"296":106,"297":1},{"299":452},{"301":1,"302":61,"303":456,"304":457},{"306":467,"307":121,"308":1,"309":1},{"312":482,"313":483,"314":484},{"316":55,"317":493,"318":389,"319":1,"320":494,"321":495,"322":496,"323":497,"324":498,"325":499,"326":500,"327":2,"328":2,"329":501},{"331":529,"332":530,"333":531},{"29":545,"35":545,"124":168,"337":55,"338":429},{"340":6,"341":55,"342":550},{"344":551,"345":551},{"348":97},{"0":73,"51":55,"52":55,"53":74,"54":75,"55":666,"56":667},{"73":98,"104":121,"113":1,"114":2,"115":683,"116":684,"117":164},{"153":715,"154":243},{"331":696,"332":697,"333":698},{"246":653,"1116":650,"1117":651,"1118":220,"1119":220,"1120":652,"1121":2,"1122":1,"1123":654,"1124":655,"1125":656,"1126":657,"1127":6,"1128":658,"1129":1,"1130":1,"1131":659,"1132":655,"1133":655,"1134":55,"1135":1,"1136":34,"1137":34,"1138":220},{"1140":1},{"65":98,"1143":670,"1144":312,"1145":1,"1146":55},{"29":172,"31":55},{"29":172,"1149":686},{"259":112,"1151":121,"1152":687,"1153":688,"1154":5,"1155":689,"1156":2},{"1160":693},{"0":724,"131":725,"196":726,"1162":723,"1163":1},{"0":764,"1162":766,"1165":763,"1166":312,"1167":765,"1168":767,"1169":768,"1170":769,"1171":770,"1172":106},{"0":764,"1166":312,"1170":816,"1171":770,"1174":811,"1175":765,"1176":812,"1177":813,"1178":814,"1179":815,"1180":817,"1181":1,"1182":818,"1183":819,"1184":820},{"0":860,"131":861,"196":862,"1162":859,"1163":863},{"1188":901,"1189":1},{"316":55,"317":968,"318":389,"319":1,"320":969,"321":970,"322":971,"323":972,"324":498,"325":973,"326":974,"327":2,"328":2,"329":975},{"351":17,"352":18,"353":19,"354":19,"355":20,"356":21,"357":22,"358":17,"359":23,"360":23,"361":19},{"372":51,"373":52,"374":52,"375":52,"376":53},{"377":64,"378":64,"379":65},{"380":66},{"381":68,"382":69,"383":68,"384":70,"385":68},{"384":79,"386":78,"387":78,"388":80,"389":81,"390":82,"391":83,"392":84,"393":85},{"394":122,"395":123,"396":124,"397":125,"398":126,"399":127,"400":128,"401":129,"402":128,"403":130,"404":131,"405":132,"406":128,"407":128,"408":133,"409":134,"410":128,"411":135,"412":136,"413":124,"414":134,"415":137,"416":138,"417":139,"418":140,"419":130,"420":141,"421":142,"422":143,"423":144,"424":139},{"425":165,"426":128},{"377":169,"378":169,"427":170},{"434":190,"435":191,"436":192,"437":193,"438":194,"439":195},{"381":221,"452":222,"453":223,"454":224,"455":225},{"456":128,"457":229,"458":230,"459":231,"460":232,"461":233},{"484":277,"485":278,"486":278,"491":276,"492":279,"493":278,"494":278},{"440":293,"495":290,"496":291,"497":292,"498":294},{"499":302,"500":303,"501":304},{"395":315,"396":316,"397":318,"399":321,"400":326,"447":323,"502":314,"503":128,"504":317,"505":319,"506":320,"507":322,"508":324,"509":325,"510":327,"511":328,"512":329,"513":330,"514":331,"515":332,"516":326,"517":326,"518":333,"519":334,"520":334,"521":326},{"522":128,"523":128,"524":355},{"572":391,"573":392,"574":393,"575":392,"576":394,"577":395,"578":396,"579":397,"580":398},{"581":403},{"582":411,"583":412,"584":413,"585":414,"586":415,"587":415,"588":416,"589":417,"590":418,"591":418,"592":419},{"593":128},{"594":433},{"595":438,"596":438},{"523":446,"597":444,"598":445,"599":447,"600":394,"601":128,"602":394,"603":391,"604":392},{"605":453,"606":394,"607":394},{"608":458,"609":459,"610":128},{"505":468,"611":469,"612":470,"613":68,"614":68,"615":468,"616":471,"617":68,"618":472},{"619":477,"620":478,"621":479},{"622":485,"623":486,"624":487,"625":488,"626":489,"627":490},{"628":502,"629":503,"630":503,"631":504,"632":505,"633":506,"634":507,"635":507,"636":508,"637":508,"638":509,"639":508,"640":510,"641":511},{"642":533,"643":534},{"646":546,"647":546,"648":547,"649":548,"650":548,"651":549,"652":549},{"425":685,"426":128},{"642":699,"643":700},{"1191":660,"1192":661},{"408":671,"1193":672,"1194":673,"1195":128,"1196":128,"1197":674,"1198":674,"1199":675,"1200":676},{"1201":128,"1202":128,"1203":130,"1204":130,"1205":130},{"1206":694},{"382":731,"384":732,"385":733,"387":731,"388":745,"393":730,"447":736,"505":727,"613":743,"1207":728,"1208":446,"1209":446,"1210":446,"1211":446,"1212":729,"1213":733,"1214":446,"1215":446,"1216":734,"1217":735,"1218":446,"1219":737,"1220":446,"1221":738,"1222":739,"1223":740,"1224":741,"1225":742,"1226":446,"1227":744,"1228":733,"1229":733,"1230":733},{"382":776,"385":778,"393":775,"447":787,"505":771,"1207":772,"1212":774,"1213":778,"1216":780,"1217":781,"1218":778,"1222":782,"1223":783,"1231":773,"1232":777,"1233":779,"1234":779,"1235":784,"1236":785,"1237":786,"1238":788,"1239":779,"1240":789,"1241":790,"1242":791,"1243":792},{"382":776,"393":778,"447":836,"505":821,"1207":822,"1212":824,"1216":780,"1217":827,"1218":778,"1222":830,"1223":782,"1231":823,"1232":777,"1236":832,"1237":834,"1238":837,"1239":779,"1240":789,"1241":790,"1242":791,"1243":792,"1244":825,"1245":778,"1246":778,"1247":826,"1248":828,"1249":829,"1250":778,"1251":831,"1252":833,"1253":782,"1254":835,"1255":838,"1256":839,"1257":840,"1258":841,"1259":842,"1260":843,"1261":844},{"382":869,"384":870,"385":871,"387":869,"388":883,"393":868,"447":874,"505":864,"613":881,"1207":865,"1208":866,"1209":866,"1210":866,"1211":866,"1212":867,"1213":871,"1214":866,"1215":866,"1216":872,"1217":873,"1218":866,"1219":875,"1220":866,"1221":876,"1222":877,"1223":878,"1224":879,"1225":880,"1226":866,"1227":882,"1228":871,"1229":871,"1230":871},{"1226":902,"1262":902,"1263":903,"1264":904,"1265":905,"1266":906},{"628":976,"629":977,"630":977,"631":978,"632":979,"633":506,"634":980,"635":980,"636":981,"637":981,"638":509,"639":981,"640":982,"641":983},{"675":54,"676":54,"677":54},{"678":71,"679":72,"680":71},{"283":90,"681":86,"682":87,"683":88,"684":89,"685":90,"686":90,"687":91,"688":90,"689":90,"690":90,"691":90,"692":90,"693":90,"694":90,"695":92,"696":93,"697":93,"698":90,"699":90,"700":90,"701":94},{"702":96},{"718":160},{"719":149},{"720":171,"721":26,"722":26},{"734":196,"735":197,"736":198,"737":198},{"738":205,"739":206,"740":206,"741":90,"742":207,"743":72,"744":72,"745":208,"746":72,"747":208,"748":208,"749":208,"750":208,"751":206,"752":209,"753":209},{"757":226},{"758":234,"759":27},{"775":72,"776":270,"777":72,"778":271,"779":272,"780":72,"781":72,"782":72,"783":273,"784":274,"785":273},{"667":280,"724":281,"757":282,"786":280},{"690":297,"704":297,"787":295,"788":296,"789":26,"790":298},{"791":305,"792":306},{"66":336,"708":338,"709":339,"793":335,"794":337,"795":340,"796":341,"797":342,"798":343,"799":344,"800":345,"801":346,"802":347,"803":348,"804":349,"805":350,"806":351,"807":351},{"690":360,"734":360,"812":360,"813":360},{"818":399,"819":399,"820":399,"821":399,"822":400,"823":401,"824":401,"825":401},{"826":420,"827":421,"828":422,"829":421,"830":420,"831":420,"832":422},{"833":430,"834":431,"835":399},{"836":439,"837":440},{"685":450,"838":448,"839":449,"840":451},{"841":454,"842":455},{"685":462,"686":463,"843":460,"844":461,"845":464,"846":465,"847":466},{"857":480,"858":481},{"690":90,"859":491,"860":26,"861":492},{"862":512,"863":513,"864":514,"865":515,"866":516,"867":517,"868":516,"869":516,"870":518,"871":514,"872":519,"873":520,"874":521,"875":522,"876":523,"877":524,"878":514,"879":525,"880":526,"881":526,"882":526,"883":527,"884":520,"885":528},{"886":535,"887":536,"888":537,"889":538},{"886":701,"887":702,"888":703,"889":704},{"1267":26,"1268":662,"1269":26,"1270":663,"1271":664,"1272":665},{"1273":668,"1274":669},{"1275":677,"1276":678,"1277":678,"1278":679,"1279":680,"1280":681,"1281":681,"1282":678,"1283":682,"1284":678},{"1285":690},{"1289":695,"1290":695},{"283":752,"692":749,"696":747,"700":752,"709":762,"752":756,"753":753,"793":746,"795":753,"1291":748,"1292":750,"1293":751,"1294":753,"1295":753,"1296":754,"1297":755,"1298":753,"1299":751,"1300":757,"1301":758,"1302":759,"1303":753,"1304":760,"1305":761,"1306":752,"1307":762},{"283":798,"692":796,"696":796,"700":798,"752":803,"753":798,"793":793,"795":795,"1291":797,"1292":800,"1293":799,"1299":794,"1300":801,"1301":801,"1308":795,"1309":795,"1310":795,"1311":802,"1312":795,"1313":804,"1314":805,"1315":806,"1316":807,"1317":808,"1318":809,"1319":798,"1320":810},{"692":796,"696":796,"793":793,"795":795,"1291":797,"1292":846,"1293":799,"1299":794,"1301":801,"1311":848,"1312":795,"1313":804,"1314":850,"1315":851,"1316":807,"1317":808,"1318":809,"1319":798,"1320":810,"1321":798,"1322":798,"1323":845,"1324":795,"1325":847,"1326":796,"1327":795,"1328":849,"1329":798,"1330":852,"1331":852,"1332":795,"1333":853,"1334":854,"1335":855,"1336":855,"1337":856,"1338":857,"1339":858},{"283":890,"692":887,"696":885,"700":890,"709":900,"752":894,"753":891,"793":884,"795":891,"1291":886,"1292":888,"1293":889,"1294":891,"1295":891,"1296":892,"1297":893,"1298":891,"1299":889,"1300":895,"1301":896,"1302":897,"1303":891,"1304":898,"1305":899,"1306":890,"1307":900},{"1305":912,"1340":907,"1341":908,"1342":909,"1343":910,"1344":911},{"862":984,"863":985,"864":986,"865":987,"866":516,"867":517,"868":516,"869":516,"870":988,"871":986,"872":519,"873":989,"874":990,"875":991,"876":992,"877":993,"878":986,"879":994,"880":995,"881":995,"882":995,"883":996,"884":989,"885":528},{"898":13,"899":14,"900":1,"901":15,"902":16,"903":1},{"904":34,"905":1},{"906":55,"907":55,"908":1,"909":1},{"910":55},{"688":55},{"911":55,"912":1,"913":1,"914":1},{"915":1},{"916":1,"917":1,"918":1,"919":1,"920":1,"921":1},{"908":1,"909":1,"922":55},{"923":1,"924":1,"925":175,"926":1,"927":1},{"928":1,"929":1},{"930":55,"931":1,"932":1,"933":1,"934":201},{"935":220},{"936":55,"937":1},{"938":1},{"939":55,"940":55,"941":1,"942":1,"943":55,"944":55},{"945":55,"946":55,"947":1},{"948":55,"949":1,"950":1,"951":1,"952":264,"953":264,"954":55,"955":55,"956":1},{"957":1,"958":55},{"959":1,"960":1,"961":55,"962":1,"963":34,"964":1,"965":55,"966":55,"967":55,"968":1,"969":1,"970":34,"971":1,"972":1},{"973":301},{"925":175,"974":1,"975":1},{"95":1,"925":175},{"976":55},{"925":175,"977":55,"978":1},{"955":55,"979":55},{"980":1,"981":1},{"982":1,"983":1,"984":1,"985":1},{"925":175,"986":55,"987":1},{"990":1},{"991":1,"992":1,"993":532,"994":532},{"1345":1},{"1346":55},{"1347":1,"1348":1,"1349":1},{"1350":1,"1351":55,"1352":55,"1353":55,"1354":55,"1355":55,"1356":1},{"1353":55,"1356":1,"1357":55,"1358":55,"1359":55,"1360":55,"1361":1,"1362":1},{"1353":55,"1356":1,"1357":55,"1358":55,"1359":55,"1360":55,"1361":1,"1362":1,"1363":1,"1364":1,"1365":1,"1366":1,"1367":1,"1368":55},{"925":175,"1369":1,"1370":55,"1371":863,"1372":1,"1373":55,"1374":1},{"898":13,"899":14,"900":1,"901":15,"902":927,"903":1},{"1003":562,"1004":563,"1005":564},{"997":558},{"999":559,"1000":560,"1001":561},{"1011":578,"1021":576,"1022":577},{"1024":579},{"1026":580},{"1060":608,"1061":609,"1062":610,"1063":611,"1064":612,"1065":613,"1066":614},{"1068":615,"1069":616,"1070":617,"1071":618,"1072":619},{"1074":620,"1075":620},{"1065":623,"1077":621,"1078":622,"1079":624},{"1065":627,"1078":628,"1081":625,"1082":624,"1083":626,"1084":626},{"1086":581},{"1088":629,"1089":630},{"1091":631},{"1093":632,"1094":633,"1095":634,"1096":635},{"1101":638,"1102":639,"1103":640,"1104":641},{"1109":644},{"1111":645,"1112":646,"1113":647},{"1086":581,"1375":624},{"1377":916},{"1381":923},{"1383":924,"1384":924,"1385":925},{"999":1003,"1000":560,"1001":561},{"1024":1006},{"1101":1015,"1102":1016,"1103":1017,"1104":1018},{"1109":1021}],["Account","ExtrinsicCount","InherentsApplied","BlockWeight","AllExtrinsicsLen","BlockHash","ExtrinsicData","Number","ParentHash","Digest","Events","EventCount","EventTopics","LastRuntimeUpgrade","UpgradedToU32RefCount","UpgradedToTripleRefCount","ExecutionPhase","AuthorizedUpgrade","System","IncompleteSince","Agenda","Retries","Lookup","Scheduler","StatusFor","RequestStatusFor","PreimageFor","Preimage","EpochIndex","Authorities","GenesisSlot","CurrentSlot","Randomness","PendingEpochConfigChange","NextRandomness","NextAuthorities","SegmentIndex","UnderConstruction","Initialized","AuthorVrfRandomness","EpochStart","Lateness","EpochConfig","NextEpochConfig","SkippedEpochs","Babe","Now","DidUpdate","Timestamp","Accounts","Indices","TotalIssuance","InactiveIssuance","Locks","Reserves","Holds","Freezes","Balances","NextFeeMultiplier","StorageVersion","TransactionPayment","Author","Authorship","ValidatorCount","MinimumValidatorCount","Invulnerables","Bonded","MinNominatorBond","MinValidatorBond","MinimumActiveStake","MinCommission","Ledger","Payee","Validators","CounterForValidators","MaxValidatorsCount","Nominators","CounterForNominators","VirtualStakers","CounterForVirtualStakers","MaxNominatorsCount","CurrentEra","ActiveEra","ErasStartSessionIndex","ErasStakers","ErasStakersOverview","ErasStakersClipped","ErasStakersPaged","ClaimedRewards","ErasValidatorPrefs","ErasValidatorReward","ErasRewardPoints","ErasTotalStake","ForceEra","MaxStakedRewards","SlashRewardFraction","CanceledSlashPayout","UnappliedSlashes","BondedEras","ValidatorSlashInEra","NominatorSlashInEra","SlashingSpans","SpanSlash","CurrentPlannedSession","DisabledValidators","ChillThreshold","Staking","Reports","ConcurrentReportsIndex","Offences","HistoricalSessions","StoredRange","Historical","CurrentIndex","QueuedChanged","QueuedKeys","NextKeys","KeyOwner","Session","State","PendingChange","NextForced","Stalled","CurrentSetId","SetIdSession","Grandpa","Keys","AuthorityDiscovery","ProposalCount","Proposals","Deactivated","Approvals","SpendCount","Spends","Treasury","VotingFor","ClassLocksFor","ConvictionVoting","ReferendumCount","ReferendumInfoFor","TrackQueue","DecidingCount","MetadataOf","Referenda","Origins","WhitelistedCall","Whitelist","Claims","Total","Vesting","Signing","Preclaims","Utility","Proxies","Announcements","Proxy","Multisigs","Multisig","BountyCount","Bounties","BountyDescriptions","BountyApprovals","ChildBountyCount","ParentChildBounties","ChildBounties","ChildrenCuratorFees","Round","CurrentPhase","QueuedSolution","Snapshot","DesiredTargets","SnapshotMetadata","SignedSubmissionNextIndex","SignedSubmissionIndices","SignedSubmissionsMap","MinimumUntrustedScore","ElectionProviderMultiPhase","ListNodes","CounterForListNodes","ListBags","VoterList","TotalValueLocked","MinJoinBond","MinCreateBond","MaxPools","MaxPoolMembers","MaxPoolMembersPerPool","GlobalMaxCommission","PoolMembers","CounterForPoolMembers","BondedPools","CounterForBondedPools","RewardPools","CounterForRewardPools","SubPoolsStorage","CounterForSubPoolsStorage","Metadata","CounterForMetadata","LastPoolId","ReversePoolIdLookup","CounterForReversePoolIdLookup","ClaimPermissions","NominationPools","Head","Queue","CounterForQueue","ErasToCheckPerBlock","FastUnstake","Delegators","CounterForDelegators","Agents","CounterForAgents","DelegatedStaking","ParachainsOrigin","ActiveConfig","PendingConfigs","BypassConsistencyCheck","Configuration","CurrentSessionIndex","ActiveValidatorIndices","ActiveValidatorKeys","AllowedRelayParents","ParasShared","V1","ParaInclusion","Included","OnChainVotes","ParaInherent","ValidatorGroups","SessionStartBlock","ClaimQueue","ParaScheduler","PvfActiveVoteMap","PvfActiveVoteList","Parachains","ParaLifecycles","Heads","MostRecentContext","CurrentCodeHash","PastCodeHash","PastCodeMeta","PastCodePruning","FutureCodeUpgrades","FutureCodeUpgradesAt","FutureCodeHash","UpgradeGoAheadSignal","UpgradeRestrictionSignal","UpgradeCooldowns","UpcomingUpgrades","ActionsQueue","UpcomingParasGenesis","CodeByHashRefs","CodeByHash","Paras","HasInitialized","BufferedSessionChanges","Initializer","DownwardMessageQueues","DownwardMessageQueueHeads","DeliveryFeeFactor","Dmp","HrmpOpenChannelRequests","HrmpOpenChannelRequestsList","HrmpOpenChannelRequestCount","HrmpAcceptedChannelRequestCount","HrmpCloseChannelRequests","HrmpCloseChannelRequestsList","HrmpWatermarks","HrmpChannels","HrmpIngressChannelsIndex","HrmpEgressChannelsIndex","HrmpChannelContents","HrmpChannelDigests","Hrmp","AssignmentKeysUnsafe","EarliestStoredSession","Sessions","AccountKeys","SessionExecutorParams","ParaSessionInfo","LastPrunedSession","Disputes","BackersOnDisputes","Frozen","ParasDisputes","ValidatorSetCounts","ParasSlashing","ParaIdAffinity","QueueStatus","FreeEntries","AffinityEntries","Revenue","OnDemand","CoreSchedules","CoreDescriptors","CoretimeAssignmentProvider","PendingSwap","NextFreeParaId","Registrar","Leases","Slots","AuctionCounter","AuctionInfo","ReservedAmounts","Winning","Auctions","Funds","NewRaise","EndingsCount","NextFundIndex","Crowdloan","Coretime","MigrationProcess","AutoLimits","SignedMigrationMaxLimits","StateTrieMigration","QueryCounter","Queries","AssetTraps","SafeXcmVersion","SupportedVersion","VersionNotifiers","VersionNotifyTargets","VersionDiscoveryQueue","CurrentMigration","RemoteLockedFungibles","LockedFungibles","XcmExecutionSuspended","ShouldRecordXcm","RecordedXcm","XcmPallet","BookStateFor","ServiceHead","Pages","MessageQueue","ConversionRateToNative","AssetRate","ValidatorSetId","GenesisBlock","Beefy","RootHash","NumberOfLeaves","Nodes","Mmr","BeefyAuthorities","BeefyNextAuthorities","BeefyMmrLeaf","ParaSudoWrapper","Key","Sudo","storage","remark","set_heap_pages","set_code","set_code_without_checks","set_storage","kill_storage","kill_prefix","remark_with_event","authorize_upgrade","authorize_upgrade_without_checks","apply_authorized_upgrade","schedule","cancel","schedule_named","cancel_named","schedule_after","schedule_named_after","set_retry","set_retry_named","cancel_retry","cancel_retry_named","note_preimage","unnote_preimage","request_preimage","unrequest_preimage","ensure_updated","report_equivocation","report_equivocation_unsigned","plan_config_change","set","claim","transfer","free","force_transfer","freeze","transfer_allow_death","transfer_keep_alive","transfer_all","force_unreserve","upgrade_accounts","force_set_balance","force_adjust_total_issuance","burn","bond","bond_extra","unbond","withdraw_unbonded","validate","nominate","chill","set_payee","set_controller","set_validator_count","increase_validator_count","scale_validator_count","force_no_eras","force_new_era","set_invulnerables","force_unstake","force_new_era_always","cancel_deferred_slash","payout_stakers","rebond","reap_stash","kick","set_staking_configs","chill_other","force_apply_min_commission","set_min_commission","payout_stakers_by_page","update_payee","deprecate_controller_batch","restore_ledger","withdraw_overstake","set_keys","purge_keys","note_stalled","spend_local","remove_approval","spend","payout","check_status","void_spend","vote","delegate","undelegate","unlock","remove_vote","remove_other_vote","submit","place_decision_deposit","refund_decision_deposit","kill","nudge_referendum","one_fewer_deciding","refund_submission_deposit","set_metadata","whitelist_call","remove_whitelisted_call","dispatch_whitelisted_call","dispatch_whitelisted_call_with_preimage","mint_claim","claim_attest","attest","move_claim","vest","vest_other","vested_transfer","force_vested_transfer","merge_schedules","force_remove_vesting_schedule","batch","as_derivative","batch_all","dispatch_as","force_batch","with_weight","proxy","add_proxy","remove_proxy","remove_proxies","create_pure","kill_pure","announce","remove_announcement","reject_announcement","proxy_announced","as_multi_threshold_1","as_multi","approve_as_multi","cancel_as_multi","propose_bounty","approve_bounty","propose_curator","unassign_curator","accept_curator","award_bounty","claim_bounty","close_bounty","extend_bounty_expiry","add_child_bounty","award_child_bounty","claim_child_bounty","close_child_bounty","submit_unsigned","set_minimum_untrusted_score","set_emergency_election_result","governance_fallback","rebag","put_in_front_of","put_in_front_of_other","join","claim_payout","pool_withdraw_unbonded","create","create_with_pool_id","set_state","set_configs","update_roles","bond_extra_other","set_claim_permission","claim_payout_other","set_commission","set_commission_max","set_commission_change_rate","claim_commission","adjust_pool_deposit","set_commission_claim_permission","apply_slash","migrate_delegation","migrate_pool_to_delegate_stake","register_fast_unstake","deregister","control","set_validation_upgrade_cooldown","set_validation_upgrade_delay","set_code_retention_period","set_max_code_size","set_max_pov_size","set_max_head_data_size","set_coretime_cores","set_group_rotation_frequency","set_paras_availability_period","set_scheduling_lookahead","set_max_validators_per_core","set_max_validators","set_dispute_period","set_dispute_post_conclusion_acceptance_period","set_no_show_slots","set_n_delay_tranches","set_zeroth_delay_tranche_width","set_needed_approvals","set_relay_vrf_modulo_samples","set_max_upward_queue_count","set_max_upward_queue_size","set_max_downward_message_size","set_max_upward_message_size","set_max_upward_message_num_per_candidate","set_hrmp_open_request_ttl","set_hrmp_sender_deposit","set_hrmp_recipient_deposit","set_hrmp_channel_max_capacity","set_hrmp_channel_max_total_size","set_hrmp_max_parachain_inbound_channels","set_hrmp_channel_max_message_size","set_hrmp_max_parachain_outbound_channels","set_hrmp_max_message_num_per_candidate","set_pvf_voting_ttl","set_minimum_validation_upgrade_delay","set_bypass_consistency_check","set_async_backing_params","set_executor_params","set_on_demand_base_fee","set_on_demand_fee_variability","set_on_demand_queue_max_size","set_on_demand_target_queue_utilization","set_minimum_backing_votes","set_node_feature","set_approval_voting_params","set_scheduler_params","enter","force_set_current_code","force_set_current_head","force_schedule_code_upgrade","force_note_new_head","force_queue_action","add_trusted_validation_code","poke_unused_validation_code","include_pvf_check_statement","force_set_most_recent_context","force_approve","hrmp_init_open_channel","hrmp_accept_open_channel","hrmp_close_channel","force_clean_hrmp","force_process_hrmp_open","force_process_hrmp_close","hrmp_cancel_open_request","force_open_hrmp_channel","establish_system_channel","poke_channel_deposits","establish_channel_with_system","force_unfreeze","report_dispute_lost_unsigned","place_order_allow_death","place_order_keep_alive","register","force_register","swap","remove_lock","reserve","add_lock","schedule_code_upgrade","set_current_head","force_lease","clear_all_leases","trigger_onboard","new_auction","bid","cancel_auction","contribute","withdraw","refund","dissolve","edit","add_memo","poke","contribute_all","request_core_count","request_revenue_at","assign_core","control_auto_migration","continue_migrate","migrate_custom_top","migrate_custom_child","set_signed_max_limits","force_set_progress","send","teleport_assets","reserve_transfer_assets","execute","force_xcm_version","force_default_xcm_version","force_subscribe_version_notify","force_unsubscribe_version_notify","limited_reserve_transfer_assets","limited_teleport_assets","force_suspension","transfer_assets","claim_assets","transfer_assets_using_type_and_then","reap_page","execute_overweight","update","remove","report_double_voting","report_double_voting_unsigned","set_new_genesis","report_fork_voting","report_fork_voting_unsigned","report_future_block_voting","report_future_block_voting_unsigned","sudo","sudo_unchecked_weight","set_key","sudo_as","remove_key","tx","ExtrinsicSuccess","ExtrinsicFailed","CodeUpdated","NewAccount","KilledAccount","Remarked","UpgradeAuthorized","Scheduled","Canceled","Dispatched","RetrySet","RetryCancelled","CallUnavailable","PeriodicFailed","RetryFailed","PermanentlyOverweight","Noted","Requested","Cleared","IndexAssigned","IndexFreed","IndexFrozen","Endowed","DustLost","Transfer","BalanceSet","Reserved","Unreserved","ReserveRepatriated","Deposit","Withdraw","Slashed","Minted","Burned","Suspended","Restored","Upgraded","Issued","Rescinded","Locked","Unlocked","Thawed","TotalIssuanceForced","TransactionFeePaid","EraPaid","Rewarded","SlashReported","OldSlashingReportDiscarded","StakersElected","Unbonded","Withdrawn","Kicked","StakingElectionFailed","Chilled","PayoutStarted","ValidatorPrefsSet","SnapshotVotersSizeExceeded","SnapshotTargetsSizeExceeded","ControllerBatchDeprecated","Offence","NewSession","NewAuthorities","Paused","Resumed","Spending","Awarded","Burnt","Rollover","SpendApproved","UpdatedInactive","AssetSpendApproved","AssetSpendVoided","Paid","PaymentFailed","SpendProcessed","Delegated","Undelegated","Voted","VoteRemoved","Submitted","DecisionDepositPlaced","DecisionDepositRefunded","DepositSlashed","DecisionStarted","ConfirmStarted","ConfirmAborted","Confirmed","Approved","Rejected","TimedOut","Cancelled","Killed","SubmissionDepositRefunded","MetadataSet","MetadataCleared","CallWhitelisted","WhitelistedCallRemoved","WhitelistedCallDispatched","Claimed","VestingUpdated","VestingCompleted","BatchInterrupted","BatchCompleted","BatchCompletedWithErrors","ItemCompleted","ItemFailed","DispatchedAs","ProxyExecuted","PureCreated","Announced","ProxyAdded","ProxyRemoved","NewMultisig","MultisigApproval","MultisigExecuted","MultisigCancelled","BountyProposed","BountyRejected","BountyBecameActive","BountyAwarded","BountyClaimed","BountyCanceled","BountyExtended","BountyApproved","CuratorProposed","CuratorUnassigned","CuratorAccepted","Added","SolutionStored","ElectionFinalized","ElectionFailed","PhaseTransitioned","Rebagged","ScoreUpdated","Created","PaidOut","Destroyed","StateChanged","MemberRemoved","RolesUpdated","PoolSlashed","UnbondingPoolSlashed","PoolCommissionUpdated","PoolMaxCommissionUpdated","PoolCommissionChangeRateUpdated","PoolCommissionClaimPermissionUpdated","PoolCommissionClaimed","MinBalanceDeficitAdjusted","MinBalanceExcessAdjusted","Unstaked","BatchChecked","BatchFinished","InternalError","Released","MigratedDelegation","CandidateBacked","CandidateIncluded","CandidateTimedOut","UpwardMessagesReceived","CurrentCodeUpdated","CurrentHeadUpdated","CodeUpgradeScheduled","NewHeadNoted","ActionQueued","PvfCheckStarted","PvfCheckAccepted","PvfCheckRejected","OpenChannelRequested","OpenChannelCanceled","OpenChannelAccepted","ChannelClosed","HrmpChannelForceOpened","HrmpSystemChannelOpened","OpenChannelDepositsUpdated","DisputeInitiated","DisputeConcluded","Revert","OnDemandOrderPlaced","SpotPriceSet","Registered","Deregistered","Swapped","NewLeasePeriod","Leased","AuctionStarted","AuctionClosed","ReserveConfiscated","BidAccepted","WinningOffset","Contributed","Withdrew","PartiallyRefunded","AllRefunded","Dissolved","HandleBidResult","Edited","MemoUpdated","AddedToNewRaise","RevenueInfoRequested","CoreAssigned","Migrated","AutoMigrationFinished","Halted","Attempted","Sent","UnexpectedResponse","ResponseReady","Notified","NotifyOverweight","NotifyDispatchError","NotifyDecodeFailed","InvalidResponder","InvalidResponderVersion","ResponseTaken","AssetsTrapped","VersionChangeNotified","SupportedVersionChanged","NotifyTargetSendFail","NotifyTargetMigrationFail","InvalidQuerierVersion","InvalidQuerier","VersionNotifyStarted","VersionNotifyRequested","VersionNotifyUnrequested","FeesPaid","AssetsClaimed","VersionMigrationFinished","ProcessingFailed","Processed","OverweightEnqueued","PageReaped","AssetRateCreated","AssetRateRemoved","AssetRateUpdated","Sudid","KeyChanged","KeyRemoved","SudoAsDone","events","BlockWeights","BlockLength","BlockHashCount","DbWeight","Version","SS58Prefix","MaximumWeight","MaxScheduledPerBlock","EpochDuration","ExpectedBlockTime","MaxAuthorities","MaxNominators","MinimumPeriod","ExistentialDeposit","MaxLocks","MaxReserves","MaxFreezes","OperationalFeeMultiplier","HistoryDepth","SessionsPerEra","BondingDuration","SlashDeferDuration","MaxExposurePageSize","MaxUnlockingChunks","MaxSetIdSessionEntries","SpendPeriod","Burn","PalletId","MaxApprovals","PayoutPeriod","MaxVotes","VoteLockingPeriod","SubmissionDeposit","MaxQueued","UndecidingTimeout","AlarmInterval","Tracks","Prefix","MinVestedTransfer","MaxVestingSchedules","batched_calls_limit","ProxyDepositBase","ProxyDepositFactor","MaxProxies","MaxPending","AnnouncementDepositBase","AnnouncementDepositFactor","DepositBase","DepositFactor","MaxSignatories","BountyDepositBase","BountyDepositPayoutDelay","BountyUpdatePeriod","CuratorDepositMultiplier","CuratorDepositMax","CuratorDepositMin","BountyValueMinimum","DataDepositPerByte","MaximumReasonLength","MaxActiveChildBountyCount","ChildBountyValueMinimum","BetterSignedThreshold","OffchainRepeat","MinerTxPriority","SignedMaxSubmissions","SignedMaxWeight","SignedMaxRefunds","SignedRewardBase","SignedDepositByte","SignedDepositWeight","MaxWinners","MinerMaxLength","MinerMaxWeight","MinerMaxVotesPerVoter","MinerMaxWinners","BagThresholds","MaxPointsToBalance","MaxUnbonding","UnsignedPriority","TrafficDefaultValue","MaxHistoricalRevenue","ParaDeposit","LeasePeriod","LeaseOffset","EndingPeriod","SampleLength","SlotRangeCount","LeasePeriodsPerSlot","MinContribution","RemoveKeysLimit","BrokerId","BrokerPotLocation","MaxKeyLen","HeapSize","MaxStale","ServiceWeight","IdleMaxServiceWeight","constants","viewFns","experimental_inflation_prediction_info","Inflation","version","execute_block","initialize_block","Core","metadata","metadata_at_version","metadata_versions","apply_extrinsic","finalize_block","inherent_extrinsics","check_inherents","BlockBuilder","pending_rewards","points_to_balance","balance_to_points","pool_pending_slash","member_pending_slash","pool_needs_delegate_migration","member_needs_delegate_migration","member_total_balance","pool_balance","NominationPoolsApi","nominations_quota","eras_stakers_page_count","StakingApi","validate_transaction","TaggedTransactionQueue","offchain_worker","OffchainWorkerApi","validators","validator_groups","availability_cores","persisted_validation_data","assumed_validation_data","check_validation_outputs","session_index_for_child","validation_code","candidate_pending_availability","candidate_events","dmq_contents","inbound_hrmp_channels_contents","validation_code_by_hash","on_chain_votes","session_info","submit_pvf_check_statement","pvfs_require_precheck","validation_code_hash","disputes","session_executor_params","unapplied_slashes","key_ownership_proof","submit_report_dispute_lost","minimum_backing_votes","para_backing_state","async_backing_params","disabled_validators","node_features","approval_voting_params","claim_queue","candidates_pending_availability","ParachainHost","beefy_genesis","validator_set","submit_report_double_voting_unsigned_extrinsic","submit_report_fork_voting_unsigned_extrinsic","submit_report_future_block_voting_unsigned_extrinsic","generate_key_ownership_proof","generate_ancestry_proof","BeefyApi","mmr_root","mmr_leaf_count","generate_proof","verify_proof","verify_proof_stateless","MmrApi","authority_set_proof","next_authority_set_proof","BeefyMmrApi","grandpa_authorities","submit_report_equivocation_unsigned_extrinsic","current_set_id","GrandpaApi","configuration","current_epoch_start","current_epoch","next_epoch","BabeApi","authorities","AuthorityDiscoveryApi","generate_session_keys","decode_session_keys","SessionKeys","account_nonce","AccountNonceApi","query_info","query_fee_details","query_weight_to_fee","query_length_to_fee","TransactionPaymentApi","query_call_info","query_call_fee_details","TransactionPaymentCallApi","query_acceptable_payment_assets","query_xcm_weight","query_weight_to_asset_fee","query_delivery_fees","XcmPaymentApi","dry_run_call","dry_run_xcm","DryRunApi","convert_location","LocationToAccountApi","build_state","get_preset","preset_names","GenesisBuilder","apis","UnincludedSegment","AggregatedUnincludedSegment","PendingValidationCode","NewValidationCode","ValidationData","DidSetValidationCode","LastRelayChainBlockNumber","UpgradeGoAhead","RelayStateProof","RelevantMessagingState","HostConfiguration","LastDmqMqcHead","LastHrmpMqcHeads","ProcessedDownwardMessages","HrmpWatermark","HrmpOutboundMessages","UpwardMessages","PendingUpwardMessages","UpwardDeliveryFeeFactor","AnnouncedHrmpMessagesPerCandidate","ReservedXcmpWeightOverride","ReservedDmpWeightOverride","CustomValidationHeadData","ParachainSystem","ParachainId","ParachainInfo","AssetTxPayment","CandidateList","LastAuthoredBlock","DesiredCandidates","CandidacyBond","CollatorSelection","Aura","SlotInfo","AuraExt","InboundXcmpSuspended","OutboundXcmpStatus","OutboundXcmpMessages","SignalMessages","QueueConfig","QueueSuspended","XcmpQueue","PolkadotXcm","CumulusXcm","Bridge","ToKusamaXcmRouter","Asset","NextAssetId","Assets","Class","OwnershipAcceptance","ClassAccount","ClassMetadataOf","InstanceMetadataOf","Attribute","ItemPriceOf","CollectionMaxSupply","Uniques","Collection","CollectionAccount","CollectionRoleOf","Item","CollectionMetadataOf","ItemMetadataOf","ItemAttributesApprovalsOf","NextCollectionId","PendingSwapOf","CollectionConfigOf","ItemConfigOf","Nfts","ForeignAssets","PoolAssets","Pools","NextPoolAssetId","AssetConversion","set_validation_data","sudo_send_upward_message","set_desired_candidates","set_candidacy_bond","register_as_candidate","leave_intent","add_invulnerable","remove_invulnerable","update_bond","take_candidate_slot","suspend_xcm_execution","resume_xcm_execution","update_suspend_threshold","update_drop_threshold","update_resume_threshold","report_bridge_status","force_create","start_destroy","destroy_accounts","destroy_approvals","finish_destroy","mint","thaw","freeze_asset","thaw_asset","transfer_ownership","set_team","clear_metadata","force_set_metadata","force_clear_metadata","force_asset_status","approve_transfer","cancel_approval","force_cancel_approval","transfer_approved","touch","set_min_balance","touch_other","refund_other","block","destroy","redeposit","freeze_collection","thaw_collection","force_item_status","set_attribute","clear_attribute","set_collection_metadata","clear_collection_metadata","set_accept_ownership","set_collection_max_supply","set_price","buy_item","force_mint","lock_item_transfer","unlock_item_transfer","lock_collection","force_collection_owner","force_collection_config","clear_all_transfer_approvals","lock_item_properties","force_set_attribute","approve_item_attributes","cancel_item_attributes_approval","update_mint_settings","pay_tips","create_swap","cancel_swap","claim_swap","mint_pre_signed","set_attributes_pre_signed","create_pool","add_liquidity","remove_liquidity","swap_exact_tokens_for_tokens","swap_tokens_for_exact_tokens","ValidationFunctionStored","ValidationFunctionApplied","ValidationFunctionDiscarded","DownwardMessagesReceived","DownwardMessagesProcessed","UpwardMessageSent","AssetTxFeePaid","AssetRefundFailed","NewInvulnerables","InvulnerableAdded","InvulnerableRemoved","NewDesiredCandidates","NewCandidacyBond","CandidateAdded","CandidateBondUpdated","CandidateRemoved","CandidateReplaced","InvalidInvulnerableSkipped","XcmpMessageSent","InvalidFormat","UnsupportedVersion","ExecutedDownward","DeliveryFeeFactorDecreased","DeliveryFeeFactorIncreased","Transferred","TeamChanged","OwnerChanged","AssetFrozen","AssetThawed","AccountsDestroyed","ApprovalsDestroyed","DestructionStarted","ForceCreated","ApprovedTransfer","ApprovalCancelled","TransferredApproved","AssetStatusChanged","AssetMinBalanceChanged","Touched","Blocked","Deposited","CollectionFrozen","CollectionThawed","ItemStatusChanged","CollectionMetadataSet","CollectionMetadataCleared","Redeposited","AttributeSet","AttributeCleared","OwnershipAcceptanceChanged","CollectionMaxSupplySet","ItemPriceSet","ItemPriceRemoved","ItemBought","ItemTransferLocked","ItemTransferUnlocked","ItemPropertiesLocked","CollectionLocked","TransferApproved","AllApprovalsCancelled","CollectionConfigChanged","ItemMetadataSet","ItemMetadataCleared","ItemAttributesApprovalAdded","ItemAttributesApprovalRemoved","CollectionMintSettingsUpdated","NextCollectionIdIncremented","TipSent","SwapCreated","SwapCancelled","SwapClaimed","PreSignedAttributesSet","PalletAttributeSet","PoolCreated","LiquidityAdded","LiquidityRemoved","SwapExecuted","SwapCreditExecuted","SelfParaId","SlotDuration","MaxInboundSuspended","MaxActiveOutboundChannels","MaxPageSize","RemoveItemsLimit","AssetDeposit","AssetAccountDeposit","MetadataDepositBase","MetadataDepositPerByte","ApprovalDeposit","StringLimit","CollectionDeposit","ItemDeposit","AttributeDepositBase","DepositPerByte","KeyLimit","ValueLimit","ApprovalsLimit","ItemAttributesApprovalsLimit","MaxTips","MaxDeadlineDuration","MaxAttributesPerCall","Features","LPFee","PoolSetupFee","PoolSetupFeeAsset","LiquidityWithdrawalFee","MintMinLiquidity","MaxSwapPathLength","slot_duration","AuraApi","can_build_upon","AuraUnincludedSegmentApi","query_account_balances","FungiblesApi","collect_collation_info","CollectCollationInfo","quote_price_tokens_for_exact_tokens","quote_price_exact_tokens_for_tokens","get_reserves","AssetConversionApi"]]`);
    replaceTokens = (obj) => Object.fromEntries(
      Object.entries(obj).map(([key, value]) => {
        const unwrappedValue = typeof value === "object" ? replaceTokens(value) : value;
        const numericKey = Number(key);
        if (Number.isNaN(numericKey)) {
          return [key, unwrappedValue];
        }
        return [tokens[numericKey], unwrappedValue];
      })
    );
    tokenizedCommonTrees = commonTrees.map(replaceTokens);
    unwrap = (obj, depth) => depth === 0 ? obj : Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        unwrap(
          typeof value === "object" ? value : tokenizedCommonTrees[value],
          depth - 1
        )
      ])
    );
    getChainDescriptors = (key) => unwrap(replaceTokens(minified[key]), 2);
    Paseo = getChainDescriptors("paseo");
    Paseo_asset_hub = getChainDescriptors("paseo_asset_hub");
    Polkadot = getChainDescriptors("polkadot");
    Polkadot_asset_hub = getChainDescriptors("polkadot_asset_hub");
  }
});

// .papi/descriptors/src/metadataTypes.ts
var metadataTypes_exports = {};
__export(metadataTypes_exports, {
  default: () => metadataTypes_default
});
var content, metadataTypes_default;
var init_metadataTypes = __esm({
  ".papi/descriptors/src/metadataTypes.ts"() {
    content = "";
    metadataTypes_default = content;
  }
});

// .papi/descriptors/src/paseo_metadata.ts
var paseo_metadata_exports = {};
__export(paseo_metadata_exports, {
  default: () => paseo_metadata_default
});
var binMeta, paseo_metadata_default;
var init_paseo_metadata = __esm({
  ".papi/descriptors/src/paseo_metadata.ts"() {
    binMeta = "";
    paseo_metadata_default = binMeta;
  }
});

// .papi/descriptors/src/paseo_asset_hub_metadata.ts
var paseo_asset_hub_metadata_exports = {};
__export(paseo_asset_hub_metadata_exports, {
  default: () => paseo_asset_hub_metadata_default
});
var binMeta2, paseo_asset_hub_metadata_default;
var init_paseo_asset_hub_metadata = __esm({
  ".papi/descriptors/src/paseo_asset_hub_metadata.ts"() {
    binMeta2 = "";
    paseo_asset_hub_metadata_default = binMeta2;
  }
});

// .papi/descriptors/src/polkadot_metadata.ts
var polkadot_metadata_exports = {};
__export(polkadot_metadata_exports, {
  default: () => polkadot_metadata_default
});
var binMeta3, polkadot_metadata_default;
var init_polkadot_metadata = __esm({
  ".papi/descriptors/src/polkadot_metadata.ts"() {
    binMeta3 = "";
    polkadot_metadata_default = binMeta3;
  }
});

// .papi/descriptors/src/polkadot_asset_hub_metadata.ts
var polkadot_asset_hub_metadata_exports = {};
__export(polkadot_asset_hub_metadata_exports, {
  default: () => polkadot_asset_hub_metadata_default
});
var binMeta4, polkadot_asset_hub_metadata_default;
var init_polkadot_asset_hub_metadata = __esm({
  ".papi/descriptors/src/polkadot_asset_hub_metadata.ts"() {
    binMeta4 = "";
    polkadot_asset_hub_metadata_default = binMeta4;
  }
});

// .papi/descriptors/src/index.ts
var index_exports = {};
__export(index_exports, {
  ArithmeticError: () => ArithmeticError,
  AssetRateEvent: () => AssetRateEvent,
  BabeAllowedSlots: () => BabeAllowedSlots,
  BabeDigestsNextConfigDescriptor: () => BabeDigestsNextConfigDescriptor,
  BabeDigestsPreDigest: () => BabeDigestsPreDigest,
  BagsListEvent: () => BagsListEvent,
  BagsListListListError: () => BagsListListListError,
  BalanceStatus: () => BalanceStatus,
  BalancesAdjustmentDirection: () => BalancesAdjustmentDirection,
  BalancesTypesReasons: () => BalancesTypesReasons,
  BountiesBountyStatus: () => BountiesBountyStatus,
  BountiesEvent: () => BountiesEvent,
  BrokerCoretimeInterfaceCoreAssignment: () => BrokerCoretimeInterfaceCoreAssignment,
  CandidateEvent: () => CandidateEvent,
  ChildBountiesEvent: () => ChildBountiesEvent,
  ChildBountyStatus: () => ChildBountyStatus,
  ClaimsStatementKind: () => ClaimsStatementKind,
  CommonAuctionsEvent: () => CommonAuctionsEvent,
  CommonClaimsEvent: () => CommonClaimsEvent,
  CommonCrowdloanLastContribution: () => CommonCrowdloanLastContribution,
  CommonParasRegistrarEvent: () => CommonParasRegistrarEvent,
  CommonSlotsEvent: () => CommonSlotsEvent,
  ConvictionVotingVoteAccountVote: () => ConvictionVotingVoteAccountVote,
  ConvictionVotingVoteVoting: () => ConvictionVotingVoteVoting,
  CoreState: () => CoreState,
  DigestItem: () => DigestItem,
  DispatchClass: () => DispatchClass,
  DispatchRawOrigin: () => DispatchRawOrigin,
  ElectionProviderMultiPhaseElectionCompute: () => ElectionProviderMultiPhaseElectionCompute,
  ElectionProviderMultiPhaseEvent: () => ElectionProviderMultiPhaseEvent,
  ElectionProviderMultiPhasePhase: () => ElectionProviderMultiPhasePhase,
  GovernanceOrigin: () => GovernanceOrigin,
  GrandpaEquivocation: () => GrandpaEquivocation,
  GrandpaEvent: () => GrandpaEvent,
  GrandpaStoredState: () => GrandpaStoredState,
  IndicesEvent: () => IndicesEvent,
  InvalidDisputeStatementKind: () => InvalidDisputeStatementKind,
  MmrPrimitivesError: () => MmrPrimitivesError,
  MultiAddress: () => MultiAddress,
  MultiSignature: () => MultiSignature,
  MultiSigner: () => MultiSigner,
  NominationPoolsBondExtra: () => NominationPoolsBondExtra,
  NominationPoolsClaimPermission: () => NominationPoolsClaimPermission,
  NominationPoolsCommissionClaimPermission: () => NominationPoolsCommissionClaimPermission,
  NominationPoolsConfigOp: () => NominationPoolsConfigOp,
  NominationPoolsPalletFreezeReason: () => NominationPoolsPalletFreezeReason,
  NominationPoolsPoolState: () => NominationPoolsPoolState,
  OccupiedCoreAssumption: () => OccupiedCoreAssumption,
  OffencesEvent: () => OffencesEvent,
  ParachainsDisputeLocation: () => ParachainsDisputeLocation,
  ParachainsDisputeResult: () => ParachainsDisputeResult,
  ParachainsDisputesEvent: () => ParachainsDisputesEvent,
  ParachainsHrmpEvent: () => ParachainsHrmpEvent,
  ParachainsInclusionAggregateMessageOrigin: () => ParachainsInclusionAggregateMessageOrigin,
  ParachainsInclusionEvent: () => ParachainsInclusionEvent,
  ParachainsInclusionUmpQueueId: () => ParachainsInclusionUmpQueueId,
  ParachainsOrigin: () => ParachainsOrigin,
  ParachainsParasEvent: () => ParachainsParasEvent,
  ParachainsParasParaLifecycle: () => ParachainsParasParaLifecycle,
  PaseoXcmVersionedAssetId: () => PaseoXcmVersionedAssetId,
  PaseoXcmVersionedAssets: () => PaseoXcmVersionedAssets,
  PaseoXcmVersionedLocation: () => PaseoXcmVersionedLocation,
  PaseoXcmVersionedXcm: () => PaseoXcmVersionedXcm,
  Phase: () => Phase,
  PolkadotPrimitivesV6DisputeStatement: () => PolkadotPrimitivesV6DisputeStatement,
  PolkadotPrimitivesV6ExecutorParamsExecutorParam: () => PolkadotPrimitivesV6ExecutorParamsExecutorParam,
  PolkadotPrimitivesV6PvfPrepKind: () => PolkadotPrimitivesV6PvfPrepKind,
  PolkadotPrimitivesV6ValidDisputeStatementKind: () => PolkadotPrimitivesV6ValidDisputeStatementKind,
  PolkadotRuntimeParachainsCoretimeEvent: () => PolkadotRuntimeParachainsCoretimeEvent,
  PolkadotRuntimeParachainsSchedulerCommonAssignment: () => PolkadotRuntimeParachainsSchedulerCommonAssignment,
  PolkadotRuntimeParachainsSchedulerPalletCoreOccupied: () => PolkadotRuntimeParachainsSchedulerPalletCoreOccupied,
  PreimageEvent: () => PreimageEvent,
  PreimageOldRequestStatus: () => PreimageOldRequestStatus,
  PreimagePalletHoldReason: () => PreimagePalletHoldReason,
  PreimageRequestStatus: () => PreimageRequestStatus,
  PreimagesBounded: () => PreimagesBounded,
  PvfExecKind: () => PvfExecKind,
  ReferendaTypesCurve: () => ReferendaTypesCurve,
  SessionEvent: () => SessionEvent,
  SlashingOffenceKind: () => SlashingOffenceKind,
  StakingEvent: () => StakingEvent,
  StakingForcing: () => StakingForcing,
  StakingPalletConfigOp: () => StakingPalletConfigOp,
  StakingPalletConfigOpBig: () => StakingPalletConfigOpBig,
  StakingRewardDestination: () => StakingRewardDestination,
  TokenError: () => TokenError,
  TraitsScheduleDispatchTime: () => TraitsScheduleDispatchTime,
  TransactionPaymentEvent: () => TransactionPaymentEvent,
  TransactionPaymentReleases: () => TransactionPaymentReleases,
  TransactionValidityError: () => TransactionValidityError,
  TransactionValidityInvalidTransaction: () => TransactionValidityInvalidTransaction,
  TransactionValidityTransactionSource: () => TransactionValidityTransactionSource,
  TransactionValidityUnknownTransaction: () => TransactionValidityUnknownTransaction,
  TransactionalError: () => TransactionalError,
  TreasuryPaymentState: () => TreasuryPaymentState,
  UpgradeGoAhead: () => UpgradeGoAhead,
  UpgradeRestriction: () => UpgradeRestriction,
  ValidityAttestation: () => ValidityAttestation,
  Version: () => Version,
  VersionedLocatableAsset: () => VersionedLocatableAsset,
  VestingEvent: () => VestingEvent,
  VotingConviction: () => VotingConviction,
  WestendRuntimeRuntimeFreezeReason: () => WestendRuntimeRuntimeFreezeReason,
  XcmPalletOrigin: () => XcmPalletOrigin,
  XcmPalletQueryStatus: () => XcmPalletQueryStatus,
  XcmPalletVersionMigrationStage: () => XcmPalletVersionMigrationStage,
  XcmV2BodyId: () => XcmV2BodyId,
  XcmV2Instruction: () => XcmV2Instruction,
  XcmV2Junction: () => XcmV2Junction,
  XcmV2JunctionBodyPart: () => XcmV2JunctionBodyPart,
  XcmV2MultiAssetFilter: () => XcmV2MultiAssetFilter,
  XcmV2MultiassetAssetId: () => XcmV2MultiassetAssetId,
  XcmV2MultiassetAssetInstance: () => XcmV2MultiassetAssetInstance,
  XcmV2MultiassetFungibility: () => XcmV2MultiassetFungibility,
  XcmV2MultiassetWildFungibility: () => XcmV2MultiassetWildFungibility,
  XcmV2MultiassetWildMultiAsset: () => XcmV2MultiassetWildMultiAsset,
  XcmV2MultilocationJunctions: () => XcmV2MultilocationJunctions,
  XcmV2NetworkId: () => XcmV2NetworkId,
  XcmV2OriginKind: () => XcmV2OriginKind,
  XcmV2Response: () => XcmV2Response,
  XcmV2TraitsError: () => XcmV2TraitsError,
  XcmV2WeightLimit: () => XcmV2WeightLimit,
  XcmV3Instruction: () => XcmV3Instruction,
  XcmV3Junction: () => XcmV3Junction,
  XcmV3JunctionBodyId: () => XcmV3JunctionBodyId,
  XcmV3JunctionNetworkId: () => XcmV3JunctionNetworkId,
  XcmV3Junctions: () => XcmV3Junctions,
  XcmV3MaybeErrorCode: () => XcmV3MaybeErrorCode,
  XcmV3MultiassetAssetId: () => XcmV3MultiassetAssetId,
  XcmV3MultiassetAssetInstance: () => XcmV3MultiassetAssetInstance,
  XcmV3MultiassetFungibility: () => XcmV3MultiassetFungibility,
  XcmV3MultiassetMultiAssetFilter: () => XcmV3MultiassetMultiAssetFilter,
  XcmV3MultiassetWildMultiAsset: () => XcmV3MultiassetWildMultiAsset,
  XcmV3Response: () => XcmV3Response,
  XcmV3TraitsError: () => XcmV3TraitsError,
  XcmV3WeightLimit: () => XcmV3WeightLimit,
  XcmV4AssetAssetFilter: () => XcmV4AssetAssetFilter,
  XcmV4AssetWildAsset: () => XcmV4AssetWildAsset,
  XcmV4Instruction: () => XcmV4Instruction,
  XcmV4Response: () => XcmV4Response,
  XcmV4TraitsOutcome: () => XcmV4TraitsOutcome,
  XcmV5AssetFilter: () => XcmV5AssetFilter,
  XcmV5Instruction: () => XcmV5Instruction,
  XcmV5Junction: () => XcmV5Junction,
  XcmV5Junctions: () => XcmV5Junctions,
  XcmV5NetworkId: () => XcmV5NetworkId,
  XcmV5WildAsset: () => XcmV5WildAsset,
  XcmVersionedAssetId: () => XcmVersionedAssetId,
  XcmVersionedAssets: () => XcmVersionedAssets,
  XcmVersionedLocation: () => XcmVersionedLocation,
  XcmVersionedResponse: () => XcmVersionedResponse,
  XcmVersionedXcm: () => XcmVersionedXcm,
  getMetadata: () => getMetadata5,
  paseo: () => paseo_default,
  paseo_asset_hub: () => paseo_asset_hub_default,
  polkadot: () => polkadot_default,
  polkadot_asset_hub: () => polkadot_asset_hub_default
});
module.exports = __toCommonJS(index_exports);

// .papi/descriptors/src/common.ts
var table = new Uint8Array(128);
for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
var toBinary = (base64) => {
  const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
  for (let i2 = 0, j = 0; i2 < n; ) {
    const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
    const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
    bytes[j++] = c0 << 2 | c1 >> 4;
    bytes[j++] = c1 << 4 | c2 >> 2;
    bytes[j++] = c2 << 6 | c3;
  }
  return bytes;
};

// .papi/descriptors/src/paseo.ts
var descriptorValues = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Paseo"]);
var metadataTypes = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset = {};
var getMetadata = () => Promise.resolve().then(() => (init_paseo_metadata(), paseo_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis = "0x77afd6190f1554ad45fd0d31aee62aacc33c6db0ea801129acb813f913e0764f";
var _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis };
var paseo_default = _allDescriptors;

// .papi/descriptors/src/paseo_asset_hub.ts
var descriptorValues2 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Paseo_asset_hub"]);
var metadataTypes2 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset2 = {};
var getMetadata2 = () => Promise.resolve().then(() => (init_paseo_asset_hub_metadata(), paseo_asset_hub_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis2 = "0xd6eec26135305a8ad257a20d003357284c8aa03d0bdb2b357ab0a22371e11ef2";
var _allDescriptors2 = { descriptors: descriptorValues2, metadataTypes: metadataTypes2, asset: asset2, getMetadata: getMetadata2, genesis: genesis2 };
var paseo_asset_hub_default = _allDescriptors2;

// .papi/descriptors/src/polkadot.ts
var descriptorValues3 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Polkadot"]);
var metadataTypes3 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset3 = {};
var getMetadata3 = () => Promise.resolve().then(() => (init_polkadot_metadata(), polkadot_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis3 = "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3";
var _allDescriptors3 = { descriptors: descriptorValues3, metadataTypes: metadataTypes3, asset: asset3, getMetadata: getMetadata3, genesis: genesis3 };
var polkadot_default = _allDescriptors3;

// .papi/descriptors/src/polkadot_asset_hub.ts
var descriptorValues4 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Polkadot_asset_hub"]);
var metadataTypes4 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset4 = {};
var getMetadata4 = () => Promise.resolve().then(() => (init_polkadot_asset_hub_metadata(), polkadot_asset_hub_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis4 = "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f";
var _allDescriptors4 = { descriptors: descriptorValues4, metadataTypes: metadataTypes4, asset: asset4, getMetadata: getMetadata4, genesis: genesis4 };
var polkadot_asset_hub_default = _allDescriptors4;

// .papi/descriptors/src/common-types.ts
var import_polkadot_api = require("polkadot-api");
var DigestItem = import_polkadot_api._Enum;
var Phase = import_polkadot_api._Enum;
var DispatchClass = import_polkadot_api._Enum;
var BagsListListListError = import_polkadot_api._Enum;
var TokenError = import_polkadot_api._Enum;
var ArithmeticError = import_polkadot_api._Enum;
var TransactionalError = import_polkadot_api._Enum;
var PreimageEvent = import_polkadot_api._Enum;
var IndicesEvent = import_polkadot_api._Enum;
var BalanceStatus = import_polkadot_api._Enum;
var TransactionPaymentEvent = import_polkadot_api._Enum;
var StakingEvent = import_polkadot_api._Enum;
var StakingRewardDestination = import_polkadot_api._Enum;
var StakingForcing = import_polkadot_api._Enum;
var OffencesEvent = import_polkadot_api._Enum;
var SessionEvent = import_polkadot_api._Enum;
var GrandpaEvent = import_polkadot_api._Enum;
var VersionedLocatableAsset = import_polkadot_api._Enum;
var XcmV3Junctions = import_polkadot_api._Enum;
var XcmV3Junction = import_polkadot_api._Enum;
var XcmV3JunctionNetworkId = import_polkadot_api._Enum;
var XcmV3JunctionBodyId = import_polkadot_api._Enum;
var XcmV2JunctionBodyPart = import_polkadot_api._Enum;
var XcmV3MultiassetAssetId = import_polkadot_api._Enum;
var PaseoXcmVersionedLocation = import_polkadot_api._Enum;
var XcmV2MultilocationJunctions = import_polkadot_api._Enum;
var XcmV2Junction = import_polkadot_api._Enum;
var XcmV2NetworkId = import_polkadot_api._Enum;
var XcmV2BodyId = import_polkadot_api._Enum;
var ConvictionVotingVoteAccountVote = import_polkadot_api._Enum;
var PreimagesBounded = import_polkadot_api._Enum;
var CommonClaimsEvent = import_polkadot_api._Enum;
var VestingEvent = import_polkadot_api._Enum;
var BountiesEvent = import_polkadot_api._Enum;
var ChildBountiesEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseElectionCompute = import_polkadot_api._Enum;
var ElectionProviderMultiPhasePhase = import_polkadot_api._Enum;
var BagsListEvent = import_polkadot_api._Enum;
var NominationPoolsPoolState = import_polkadot_api._Enum;
var NominationPoolsCommissionClaimPermission = import_polkadot_api._Enum;
var ParachainsInclusionEvent = import_polkadot_api._Enum;
var ParachainsParasEvent = import_polkadot_api._Enum;
var ParachainsHrmpEvent = import_polkadot_api._Enum;
var ParachainsDisputesEvent = import_polkadot_api._Enum;
var ParachainsDisputeLocation = import_polkadot_api._Enum;
var ParachainsDisputeResult = import_polkadot_api._Enum;
var CommonParasRegistrarEvent = import_polkadot_api._Enum;
var CommonSlotsEvent = import_polkadot_api._Enum;
var CommonAuctionsEvent = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsCoretimeEvent = import_polkadot_api._Enum;
var XcmV4TraitsOutcome = import_polkadot_api._Enum;
var XcmV3TraitsError = import_polkadot_api._Enum;
var XcmV4Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetFungibility = import_polkadot_api._Enum;
var XcmV3MultiassetAssetInstance = import_polkadot_api._Enum;
var XcmV4Response = import_polkadot_api._Enum;
var XcmV3MaybeErrorCode = import_polkadot_api._Enum;
var XcmV2OriginKind = import_polkadot_api._Enum;
var XcmV4AssetAssetFilter = import_polkadot_api._Enum;
var XcmV4AssetWildAsset = import_polkadot_api._Enum;
var XcmV2MultiassetWildFungibility = import_polkadot_api._Enum;
var XcmV3WeightLimit = import_polkadot_api._Enum;
var PaseoXcmVersionedAssets = import_polkadot_api._Enum;
var XcmV2MultiassetAssetId = import_polkadot_api._Enum;
var XcmV2MultiassetFungibility = import_polkadot_api._Enum;
var XcmV2MultiassetAssetInstance = import_polkadot_api._Enum;
var ParachainsInclusionAggregateMessageOrigin = import_polkadot_api._Enum;
var ParachainsInclusionUmpQueueId = import_polkadot_api._Enum;
var AssetRateEvent = import_polkadot_api._Enum;
var DispatchRawOrigin = import_polkadot_api._Enum;
var GovernanceOrigin = import_polkadot_api._Enum;
var ParachainsOrigin = import_polkadot_api._Enum;
var XcmPalletOrigin = import_polkadot_api._Enum;
var PreimageOldRequestStatus = import_polkadot_api._Enum;
var PreimageRequestStatus = import_polkadot_api._Enum;
var BabeDigestsNextConfigDescriptor = import_polkadot_api._Enum;
var BabeAllowedSlots = import_polkadot_api._Enum;
var BabeDigestsPreDigest = import_polkadot_api._Enum;
var BalancesTypesReasons = import_polkadot_api._Enum;
var PreimagePalletHoldReason = import_polkadot_api._Enum;
var WestendRuntimeRuntimeFreezeReason = import_polkadot_api._Enum;
var NominationPoolsPalletFreezeReason = import_polkadot_api._Enum;
var TransactionPaymentReleases = import_polkadot_api._Enum;
var GrandpaStoredState = import_polkadot_api._Enum;
var TreasuryPaymentState = import_polkadot_api._Enum;
var ConvictionVotingVoteVoting = import_polkadot_api._Enum;
var VotingConviction = import_polkadot_api._Enum;
var TraitsScheduleDispatchTime = import_polkadot_api._Enum;
var ClaimsStatementKind = import_polkadot_api._Enum;
var Version = import_polkadot_api._Enum;
var BountiesBountyStatus = import_polkadot_api._Enum;
var ChildBountyStatus = import_polkadot_api._Enum;
var NominationPoolsClaimPermission = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ExecutorParamsExecutorParam = import_polkadot_api._Enum;
var PolkadotPrimitivesV6PvfPrepKind = import_polkadot_api._Enum;
var PvfExecKind = import_polkadot_api._Enum;
var ValidityAttestation = import_polkadot_api._Enum;
var PolkadotPrimitivesV6DisputeStatement = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ValidDisputeStatementKind = import_polkadot_api._Enum;
var InvalidDisputeStatementKind = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerPalletCoreOccupied = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerCommonAssignment = import_polkadot_api._Enum;
var ParachainsParasParaLifecycle = import_polkadot_api._Enum;
var UpgradeGoAhead = import_polkadot_api._Enum;
var UpgradeRestriction = import_polkadot_api._Enum;
var SlashingOffenceKind = import_polkadot_api._Enum;
var BrokerCoretimeInterfaceCoreAssignment = import_polkadot_api._Enum;
var MultiSigner = import_polkadot_api._Enum;
var CommonCrowdloanLastContribution = import_polkadot_api._Enum;
var XcmPalletQueryStatus = import_polkadot_api._Enum;
var XcmVersionedResponse = import_polkadot_api._Enum;
var XcmV2Response = import_polkadot_api._Enum;
var XcmV2TraitsError = import_polkadot_api._Enum;
var XcmV3Response = import_polkadot_api._Enum;
var XcmPalletVersionMigrationStage = import_polkadot_api._Enum;
var PaseoXcmVersionedAssetId = import_polkadot_api._Enum;
var ReferendaTypesCurve = import_polkadot_api._Enum;
var MultiAddress = import_polkadot_api._Enum;
var BalancesAdjustmentDirection = import_polkadot_api._Enum;
var StakingPalletConfigOpBig = import_polkadot_api._Enum;
var StakingPalletConfigOp = import_polkadot_api._Enum;
var GrandpaEquivocation = import_polkadot_api._Enum;
var NominationPoolsBondExtra = import_polkadot_api._Enum;
var NominationPoolsConfigOp = import_polkadot_api._Enum;
var MultiSignature = import_polkadot_api._Enum;
var PaseoXcmVersionedXcm = import_polkadot_api._Enum;
var XcmV2Instruction = import_polkadot_api._Enum;
var XcmV2MultiAssetFilter = import_polkadot_api._Enum;
var XcmV2MultiassetWildMultiAsset = import_polkadot_api._Enum;
var XcmV2WeightLimit = import_polkadot_api._Enum;
var XcmV3Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetMultiAssetFilter = import_polkadot_api._Enum;
var XcmV3MultiassetWildMultiAsset = import_polkadot_api._Enum;
var TransactionValidityError = import_polkadot_api._Enum;
var TransactionValidityInvalidTransaction = import_polkadot_api._Enum;
var TransactionValidityUnknownTransaction = import_polkadot_api._Enum;
var TransactionValidityTransactionSource = import_polkadot_api._Enum;
var CoreState = import_polkadot_api._Enum;
var OccupiedCoreAssumption = import_polkadot_api._Enum;
var CandidateEvent = import_polkadot_api._Enum;
var MmrPrimitivesError = import_polkadot_api._Enum;
var XcmV5Junctions = import_polkadot_api._Enum;
var XcmV5Junction = import_polkadot_api._Enum;
var XcmV5NetworkId = import_polkadot_api._Enum;
var XcmVersionedLocation = import_polkadot_api._Enum;
var XcmV5Instruction = import_polkadot_api._Enum;
var XcmV5AssetFilter = import_polkadot_api._Enum;
var XcmV5WildAsset = import_polkadot_api._Enum;
var XcmVersionedAssets = import_polkadot_api._Enum;
var XcmVersionedAssetId = import_polkadot_api._Enum;
var XcmVersionedXcm = import_polkadot_api._Enum;

// .papi/descriptors/src/index.ts
var metadatas = {
  ["0x7ecc4cdcc10ecd3ec506a72ebf4a4846d9e0f6a9741647ab8ecb8c4a0d47eecd"]: paseo_default,
  ["0x5776737ad5251d92ca030666b319459254de1eb0319bf2b97359c5b8b764544a"]: paseo_asset_hub_default,
  ["0x716bb701ec19452fa522cdaa83ef101d368ba2bcfd89fde9acb6f793a420a616"]: polkadot_default,
  ["0x6e20bc52aaaafd1de82ba7d2a3c0fa39193787e240b93608489cf72a4c46a584"]: polkadot_asset_hub_default
};
var getMetadata5 = async (codeHash) => {
  try {
    return await metadatas[codeHash].getMetadata();
  } catch {
  }
  return null;
};
