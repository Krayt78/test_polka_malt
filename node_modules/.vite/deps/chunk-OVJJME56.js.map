{
  "version": 3,
  "sources": ["../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/wallets/provider.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/storage.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/wallets/wallet.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/wallets/deep-link-wallet.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/actions/initialize-wallets.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/errors.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/wallets/injected/wallet.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/wallets/injected/provider.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/wallets/local-wallet.ts"],
  "sourcesContent": ["import type { MaybePromise } from \"../types.js\";\nimport type { Wallet } from \"./wallet.js\";\n\nexport abstract class WalletProvider {\n  abstract getWallets(): MaybePromise<Wallet[]>;\n}\n", "import type { SimpleStorage } from \"./simple-storage.js\";\n\nexport type StorageOptions = {\n  prefix: string;\n  storage: SimpleStorage;\n};\n\nexport class Storage<TKey extends string = string> implements SimpleStorage {\n  readonly prefix: string;\n\n  #storage: SimpleStorage;\n\n  constructor(options: StorageOptions) {\n    this.prefix = options.prefix;\n    this.#storage = options.storage;\n  }\n\n  getItem(key: TKey) {\n    return this.#storage.getItem(this.#prefixKey(key));\n  }\n\n  removeItem(key: TKey) {\n    return this.#storage.removeItem(this.#prefixKey(key));\n  }\n\n  setItem(key: TKey, value: string) {\n    return this.#storage.setItem(this.#prefixKey(key), value);\n  }\n\n  join<TKeyOverride extends string | void = void>(path: string) {\n    return new Storage<TKeyOverride extends void ? TKey : TKeyOverride>({\n      prefix: `${this.prefix}/${path}`,\n      storage: this.#storage,\n    });\n  }\n\n  #prefixKey(key: string) {\n    return `${this.prefix}/${key}`;\n  }\n}\n\nexport const defaultStorage = new Storage({\n  prefix: \"@reactive-dot\",\n  storage: globalThis.localStorage,\n});\n", "import { type Storage, defaultStorage } from \"../storage.js\";\nimport type { MaybePromise } from \"../types.js\";\nimport type { PolkadotSignerAccount } from \"./account.js\";\nimport { firstValueFrom, type Observable } from \"rxjs\";\n\nexport type WalletOptions = {\n  storage?: Storage | undefined;\n};\n\nexport abstract class Wallet<\n  TOptions extends WalletOptions = WalletOptions,\n  TStorageKey extends string = string,\n> {\n  abstract readonly id: string;\n\n  abstract readonly name: string;\n\n  readonly #storage: Storage;\n\n  protected get storage() {\n    return this.#storage.join<TStorageKey>(this.id);\n  }\n\n  constructor(protected readonly options?: TOptions | undefined) {\n    this.#storage = (options?.storage ?? defaultStorage).join(\"wallet\");\n  }\n\n  abstract initialize(): MaybePromise<void>;\n\n  abstract readonly connected$: Observable<boolean>;\n\n  abstract connect(): MaybePromise<void>;\n\n  abstract disconnect(): MaybePromise<void>;\n\n  abstract readonly accounts$: Observable<PolkadotSignerAccount[]>;\n\n  getAccounts(): MaybePromise<PolkadotSignerAccount[]> {\n    return firstValueFrom(this.accounts$, { defaultValue: [] });\n  }\n}\n", "import type { MaybePromise } from \"../types.js\";\nimport { Wallet, type WalletOptions } from \"./wallet.js\";\n\ntype ConnectionHandshake = {\n  uri: string;\n  settled: Promise<void>;\n};\n\nexport abstract class DeepLinkWallet<\n  TOptions extends WalletOptions = WalletOptions,\n  TStorageKey extends string = string,\n> extends Wallet<TOptions, TStorageKey> {\n  abstract initiateConnectionHandshake(): MaybePromise<ConnectionHandshake>;\n}\n", "import type { Wallet } from \"../wallets/wallet.js\";\n\nconst initializedWallets = new Set<Wallet>();\n\nexport function initializeWallets(wallets: readonly Wallet[]) {\n  return Promise.all(\n    wallets.map(async (wallet) => {\n      if (!initializedWallets.has(wallet)) {\n        await wallet.initialize();\n        initializedWallets.add(wallet);\n      }\n    }),\n  );\n}\n", "export class BaseError extends Error {\n  static from<T>(error: T, message?: string) {\n    return new this(\n      message ?? (error instanceof Error ? error.message : undefined),\n      { cause: error },\n    );\n  }\n}\n\nexport class QueryError extends BaseError {}\n\nexport class MutationError extends BaseError {}\n\n/**\n * @deprecated Renamed to {@link BaseError}.\n */\nexport const ReactiveDotError = BaseError;\n", "import { BaseError } from \"../../errors.js\";\nimport type { PolkadotSignerAccount } from \"../account.js\";\nimport { Wallet, type WalletOptions } from \"../wallet.js\";\nimport type {\n  InjectedExtension,\n  InjectedPolkadotAccount,\n} from \"polkadot-api/pjs-signer\";\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\nimport { map, switchMap } from \"rxjs/operators\";\n\nexport type InjectedWalletOptions = WalletOptions & { originName?: string };\n\nexport class InjectedWallet extends Wallet<InjectedWalletOptions, \"connected\"> {\n  readonly #extension$ = new BehaviorSubject<InjectedExtension | undefined>(\n    undefined,\n  );\n\n  get id() {\n    return `injected/${this.name}`;\n  }\n\n  constructor(\n    public readonly name: string,\n    options?: InjectedWalletOptions,\n  ) {\n    super(options);\n  }\n\n  async initialize() {\n    if (this.storage.getItem(\"connected\") !== null) {\n      await this.connect();\n    }\n  }\n\n  readonly connected$ = this.#extension$.pipe(\n    map((extension) => extension !== undefined),\n  );\n\n  async connect() {\n    if (this.#extension$.getValue() === undefined) {\n      const { connectInjectedExtension } = await import(\n        \"polkadot-api/pjs-signer\"\n      );\n\n      this.#extension$.next(\n        await connectInjectedExtension(this.name, this.options?.originName),\n      );\n      this.storage.setItem(\"connected\", JSON.stringify(true));\n    }\n  }\n\n  disconnect() {\n    this.#extension$.getValue()?.disconnect();\n    this.#extension$.next(undefined);\n    this.storage.removeItem(\"connected\");\n  }\n\n  readonly accounts$ = this.#extension$.pipe(\n    switchMap((extension) => {\n      if (extension === undefined) {\n        return of([]);\n      }\n\n      return new Observable<PolkadotSignerAccount[]>((subscriber) => {\n        subscriber.next(this.#withIds(extension.getAccounts()));\n        subscriber.add(\n          extension.subscribe((accounts) =>\n            subscriber.next(this.#withIds(accounts)),\n          ),\n        );\n      });\n    }),\n  );\n\n  override getAccounts() {\n    const extension = this.#extension$.getValue();\n\n    if (extension === undefined) {\n      throw new BaseError(\"Extension is not connected\");\n    }\n\n    return this.#withIds(extension.getAccounts());\n  }\n\n  #withIds(accounts: InjectedPolkadotAccount[]) {\n    return accounts.map((account, index) => ({\n      id: index.toString(),\n      ...account,\n    }));\n  }\n}\n", "import { WalletProvider } from \"../provider.js\";\nimport { InjectedWallet, type InjectedWalletOptions } from \"./wallet.js\";\n\nexport class InjectedWalletProvider extends WalletProvider {\n  constructor(private readonly options?: InjectedWalletOptions) {\n    super();\n  }\n\n  async getWallets() {\n    const { getInjectedExtensions } = await import(\"polkadot-api/pjs-signer\");\n\n    return getInjectedExtensions().map(\n      (name) => new InjectedWallet(name, this.options),\n    );\n  }\n}\n", "import type { MaybePromise } from \"../types.js\";\nimport type { PolkadotSignerAccount } from \"./account.js\";\nimport { Wallet, type WalletOptions } from \"./wallet.js\";\n\n/**\n * @experimental\n */\nexport abstract class LocalWallet<\n  TAccount extends Pick<PolkadotSignerAccount, \"id\">,\n  TOptions extends WalletOptions,\n  TStorageKey extends string,\n> extends Wallet<TOptions, TStorageKey> {\n  /**\n   * @experimental\n   */\n  abstract accountStore: {\n    add(account: TAccount): MaybePromise<void>;\n    clear(): MaybePromise<void>;\n    delete(account: { id: TAccount[\"id\"] }): MaybePromise<void>;\n    delete(accountId: TAccount[\"id\"]): MaybePromise<void>;\n    has(account: { id: TAccount[\"id\"] }): MaybePromise<boolean>;\n    has(accountId: TAccount[\"id\"]): MaybePromise<boolean>;\n    values(): Iterable<TAccount>;\n  };\n}\n"],
  "mappings": "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",
  "names": ["_storage"]
}
