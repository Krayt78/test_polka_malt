import {
  AccountId,
  Blake2256,
  Bytes,
  Option,
  Struct,
  compact,
  compactBn,
  createV4Tx,
  decAnyMetadata,
  fromHex,
  toHex,
  u32,
  unifyMetadata
} from "./chunk-EVM4Y7G3.js";
import {
  __export
} from "./chunk-B4Q33VKO.js";

// node_modules/.pnpm/@polkadot-api+pjs-signer@0.6.8/node_modules/@polkadot-api/pjs-signer/dist/esm/pjs-signed-extensions-mappers.mjs
var pjs_signed_extensions_mappers_exports = {};
__export(pjs_signed_extensions_mappers_exports, {
  ChargeAssetTxPayment: () => ChargeAssetTxPayment,
  ChargeTransactionPayment: () => ChargeTransactionPayment,
  CheckGenesis: () => CheckGenesis,
  CheckMetadataHash: () => CheckMetadataHash,
  CheckMortality: () => CheckMortality,
  CheckNonce: () => CheckNonce,
  CheckSpecVersion: () => CheckSpecVersion,
  CheckTxVersion: () => CheckTxVersion
});
var toPjsHex = (value, minByteLen) => {
  let inner = value.toString(16);
  inner = (inner.length % 2 ? "0" : "") + inner;
  const nPaddedBytes = Math.max(0, (minByteLen || 0) - inner.length / 2);
  return "0x" + "00".repeat(nPaddedBytes) + inner;
};
var CheckGenesis = ({
  additionalSigned
}) => ({
  genesisHash: toHex(additionalSigned)
});
var CheckNonce = ({
  value
}) => {
  return { nonce: toPjsHex(compact.dec(value), 4) };
};
var CheckTxVersion = ({
  additionalSigned
}) => {
  return { transactionVersion: toPjsHex(u32.dec(additionalSigned), 4) };
};
var assetTxPaymentDec = Struct({
  tip: compact,
  asset: Option(Bytes(Infinity))
}).dec;
var ChargeAssetTxPayment = ({
  value
}) => {
  const { tip, asset } = assetTxPaymentDec(value);
  return {
    ...asset ? { assetId: toHex(asset) } : {},
    tip: toPjsHex(tip, 16)
  };
};
var ChargeTransactionPayment = ({
  value
}) => ({
  tip: toPjsHex(compactBn.dec(value), 16)
  // u128 => 16 bytes
});
var CheckMortality = ({ value, additionalSigned }, blockNumber) => ({
  era: toHex(value),
  blockHash: toHex(additionalSigned),
  blockNumber: toPjsHex(blockNumber, 4)
});
var CheckSpecVersion = ({
  additionalSigned
}) => ({
  specVersion: toPjsHex(u32.dec(additionalSigned), 4)
});
var CheckMetadataHash = ({
  value,
  additionalSigned
}) => value.length && value[0] ? {
  mode: 1,
  metadataHash: toHex(
    additionalSigned.length ? additionalSigned.slice(1) : additionalSigned
  )
} : {};

// node_modules/.pnpm/@polkadot-api+pjs-signer@0.6.8/node_modules/@polkadot-api/pjs-signer/dist/esm/from-pjs-account.mjs
var accountIdEnc = AccountId().enc;
var getPublicKey = (address) => address.startsWith("0x") ? fromHex(address) : accountIdEnc(address);
function getPolkadotSignerFromPjs(address, signPayload, signRaw) {
  const signBytes = (data) => signRaw({
    address,
    data: toHex(data),
    type: "bytes"
  }).then(({ signature }) => fromHex(signature));
  const publicKey = getPublicKey(address);
  const signTx = async (callData, signedExtensions, metadata, atBlockNumber, _ = Blake2256) => {
    const decMeta = unifyMetadata(decAnyMetadata(metadata));
    const pjs = {};
    pjs.signedExtensions = [];
    const { version } = decMeta.extrinsic;
    const extra = [];
    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {
      const signedExtension = signedExtensions[identifier];
      if (!signedExtension)
        throw new Error(`Missing ${identifier} signed-extension`);
      extra.push(signedExtension.value);
      pjs.signedExtensions.push(identifier);
      if (!pjs_signed_extensions_mappers_exports[identifier]) {
        if (signedExtension.value.length === 0 && signedExtension.additionalSigned.length === 0)
          return;
        throw new Error(
          `PJS does not support this signed-extension: ${identifier}`
        );
      }
      Object.assign(
        pjs,
        pjs_signed_extensions_mappers_exports[identifier](
          signedExtension,
          atBlockNumber
        )
      );
    });
    const checkedVersion = version.includes(4) ? 4 : null;
    if (checkedVersion == null)
      throw new Error("Only extrinsic v4 is supported");
    pjs.address = address;
    pjs.method = toHex(callData);
    pjs.version = checkedVersion;
    pjs.withSignedTransaction = true;
    const result = await signPayload(pjs);
    const tx = result.signedTransaction;
    if (tx) return typeof tx === "string" ? fromHex(tx) : tx;
    return createV4Tx(
      decMeta,
      publicKey,
      fromHex(result.signature),
      extra,
      callData
    );
  };
  return { publicKey, signTx, signBytes };
}

// node_modules/.pnpm/@polkadot-api+pjs-signer@0.6.8/node_modules/@polkadot-api/pjs-signer/dist/esm/injected-extensions.mjs
var supportedAccountTypes = /* @__PURE__ */ new Set([
  "ed25519",
  "sr25519",
  "ecdsa",
  "ethereum"
]);
var connectInjectedExtension = async (name, dappName) => {
  var _a;
  let entry = (_a = window.injectedWeb3) == null ? void 0 : _a[name];
  if (!entry) throw new Error(`Unavailable extension: "${name}"`);
  const enabledExtension = await entry.enable(dappName);
  const signPayload = enabledExtension.signer.signPayload.bind(
    enabledExtension.signer
  );
  const signRaw = enabledExtension.signer.signRaw.bind(enabledExtension.signer);
  const toPolkadotInjected = (accounts) => accounts.filter(({ type }) => supportedAccountTypes.has(type)).map((x) => {
    const polkadotSigner = getPolkadotSignerFromPjs(
      x.address,
      signPayload,
      signRaw
    );
    return {
      ...x,
      polkadotSigner
    };
  });
  let currentAccounts = toPolkadotInjected(
    await enabledExtension.accounts.get()
  );
  const listeners = /* @__PURE__ */ new Set();
  const stop = enabledExtension.accounts.subscribe((x) => {
    currentAccounts = toPolkadotInjected(x);
    listeners.forEach((cb) => {
      cb(currentAccounts);
    });
  });
  return {
    name,
    getAccounts: () => currentAccounts,
    subscribe: (cb) => {
      listeners.add(cb);
      return () => {
        listeners.delete(cb);
      };
    },
    disconnect: () => {
      stop();
    }
  };
};
var getInjectedExtensions = () => {
  const { injectedWeb3 } = window;
  return injectedWeb3 ? Object.keys(injectedWeb3) : [];
};
export {
  connectInjectedExtension,
  getInjectedExtensions,
  getPolkadotSignerFromPjs
};
//# sourceMappingURL=pjs-signer-OUPCTXU7.js.map
