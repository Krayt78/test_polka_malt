{
  "version": 3,
  "sources": ["../../.pnpm/@polkadot-api+pjs-signer@0.6.8/node_modules/@polkadot-api/pjs-signer/src/pjs-signed-extensions-mappers.ts", "../../.pnpm/@polkadot-api+pjs-signer@0.6.8/node_modules/@polkadot-api/pjs-signer/src/from-pjs-account.ts", "../../.pnpm/@polkadot-api+pjs-signer@0.6.8/node_modules/@polkadot-api/pjs-signer/src/injected-extensions.ts"],
  "sourcesContent": ["import { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  Bytes,\n  Struct,\n  compact,\n  u32,\n  Option,\n  compactBn,\n} from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\n\ntype SignedExtension = {\n  value: Uint8Array\n  additionalSigned: Uint8Array\n}\n\nconst toPjsHex = (value: number | bigint, minByteLen?: number) => {\n  let inner = value.toString(16)\n  inner = (inner.length % 2 ? \"0\" : \"\") + inner\n  const nPaddedBytes = Math.max(0, (minByteLen || 0) - inner.length / 2)\n  return \"0x\" + \"00\".repeat(nPaddedBytes) + inner\n}\n\nexport const CheckGenesis = ({\n  additionalSigned,\n}: SignedExtension): { genesisHash: string } => ({\n  genesisHash: toHex(additionalSigned),\n})\n\nexport const CheckNonce = ({\n  value,\n}: SignedExtension): { nonce: HexString } => {\n  // nonce is a u32 in pjs => 4 bytes\n  return { nonce: toPjsHex(compact.dec(value), 4) }\n}\n\nexport const CheckTxVersion = ({\n  additionalSigned,\n}: SignedExtension): { transactionVersion: HexString } => {\n  return { transactionVersion: toPjsHex(u32.dec(additionalSigned), 4) }\n}\n\nconst assetTxPaymentDec = Struct({\n  tip: compact,\n  asset: Option(Bytes(Infinity)),\n}).dec\n\nexport const ChargeAssetTxPayment = ({\n  value,\n}: SignedExtension): { aseetId?: string; tip?: string } => {\n  const { tip, asset } = assetTxPaymentDec(value)\n\n  return {\n    ...(asset ? { assetId: toHex(asset) } : {}),\n    tip: toPjsHex(tip, 16),\n  }\n}\n\nexport const ChargeTransactionPayment = ({\n  value,\n}: SignedExtension): { tip: HexString } => ({\n  tip: toPjsHex(compactBn.dec(value), 16), // u128 => 16 bytes\n})\n\nexport const CheckMortality = (\n  { value, additionalSigned }: SignedExtension,\n  blockNumber: number,\n): { era: HexString; blockHash: HexString; blockNumber: HexString } => ({\n  era: toHex(value),\n  blockHash: toHex(additionalSigned),\n  blockNumber: toPjsHex(blockNumber, 4),\n})\n\nexport const CheckSpecVersion = ({\n  additionalSigned,\n}: SignedExtension): { specVersion: HexString } => ({\n  specVersion: toPjsHex(u32.dec(additionalSigned), 4),\n})\n\nexport const CheckMetadataHash = ({\n  value,\n  additionalSigned,\n}: SignedExtension): { mode?: number; metadataHash?: HexString } =>\n  value.length && value[0]\n    ? {\n        mode: 1,\n        metadataHash: toHex(\n          additionalSigned.length\n            ? additionalSigned.slice(1)\n            : additionalSigned,\n        ),\n      }\n    : {}\n", "import type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  AccountId,\n  Blake2256,\n  decAnyMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport * as signedExtensionMappers from \"./pjs-signed-extensions-mappers\"\nimport { SignPayload, SignRaw, SignerPayloadJSON } from \"./types\"\n\nconst accountIdEnc = AccountId().enc\nconst getPublicKey = (address: string) =>\n  address.startsWith(\"0x\") ? fromHex(address) : accountIdEnc(address)\n\nexport function getPolkadotSignerFromPjs(\n  address: string,\n  signPayload: SignPayload,\n  signRaw: SignRaw,\n): PolkadotSigner {\n  const signBytes = (data: Uint8Array) =>\n    signRaw({\n      address,\n      data: toHex(data),\n      type: \"bytes\",\n    }).then(({ signature }) => fromHex(signature))\n  const publicKey = getPublicKey(address)\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    atBlockNumber: number,\n    _ = Blake2256,\n  ) => {\n    const decMeta = unifyMetadata(decAnyMetadata(metadata))\n\n    const pjs: Partial<SignerPayloadJSON> = {}\n    pjs.signedExtensions = []\n\n    const { version } = decMeta.extrinsic\n    const extra: Array<Uint8Array> = []\n\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed-extension`)\n      extra.push(signedExtension.value)\n\n      pjs.signedExtensions!.push(identifier)\n\n      if (!signedExtensionMappers[identifier as \"CheckMortality\"]) {\n        if (\n          signedExtension.value.length === 0 &&\n          signedExtension.additionalSigned.length === 0\n        )\n          return\n        throw new Error(\n          `PJS does not support this signed-extension: ${identifier}`,\n        )\n      }\n\n      Object.assign(\n        pjs,\n        signedExtensionMappers[identifier as \"CheckMortality\"](\n          signedExtension,\n          atBlockNumber,\n        ),\n      )\n    })\n\n    const checkedVersion = version.includes(4) ? 4 : null\n    if (checkedVersion == null)\n      throw new Error(\"Only extrinsic v4 is supported\")\n    pjs.address = address\n    pjs.method = toHex(callData)\n    pjs.version = checkedVersion\n    pjs.withSignedTransaction = true // we allow the wallet to change the payload\n\n    const result = await signPayload(pjs as SignerPayloadJSON)\n    const tx = result.signedTransaction\n    if (tx) return typeof tx === \"string\" ? fromHex(tx) : tx\n\n    return createV4Tx(\n      decMeta,\n      publicKey,\n      fromHex(result.signature),\n      extra,\n      callData,\n    )\n  }\n\n  return { publicKey, signTx, signBytes }\n}\n", "import { getPolkadotSignerFromPjs } from \"./from-pjs-account\"\nimport type {\n  InjectedAccount,\n  InjectedExtension,\n  InjectedPolkadotAccount,\n  KeypairType,\n} from \"./types\"\n\nexport type {\n  KeypairType,\n  InjectedExtension,\n  InjectedAccount,\n  InjectedPolkadotAccount,\n}\n\nconst supportedAccountTypes = new Set<KeypairType | \"ethereum\">([\n  \"ed25519\",\n  \"sr25519\",\n  \"ecdsa\",\n  \"ethereum\",\n])\n\nexport const connectInjectedExtension = async (\n  name: string,\n  dappName?: string,\n): Promise<InjectedExtension> => {\n  let entry = window.injectedWeb3?.[name]\n\n  if (!entry) throw new Error(`Unavailable extension: \"${name}\"`)\n\n  const enabledExtension = await entry.enable(dappName)\n  const signPayload = enabledExtension.signer.signPayload.bind(\n    enabledExtension.signer,\n  )\n  const signRaw = enabledExtension.signer.signRaw.bind(enabledExtension.signer)\n\n  const toPolkadotInjected = (\n    accounts: InjectedAccount[],\n  ): InjectedPolkadotAccount[] =>\n    accounts\n      .filter(({ type }) => supportedAccountTypes.has(type!))\n      .map((x) => {\n        const polkadotSigner = getPolkadotSignerFromPjs(\n          x.address,\n          signPayload,\n          signRaw,\n        )\n        return {\n          ...x,\n          polkadotSigner,\n        }\n      })\n\n  let currentAccounts: InjectedPolkadotAccount[] = toPolkadotInjected(\n    await enabledExtension.accounts.get(),\n  )\n\n  const listeners = new Set<(accounts: InjectedPolkadotAccount[]) => void>()\n  const stop = enabledExtension.accounts.subscribe((x) => {\n    currentAccounts = toPolkadotInjected(x)\n    listeners.forEach((cb) => {\n      cb(currentAccounts)\n    })\n  })\n\n  return {\n    name,\n    getAccounts: () => currentAccounts,\n    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => {\n      listeners.add(cb)\n      return () => {\n        listeners.delete(cb)\n      }\n    },\n    disconnect: () => {\n      stop()\n    },\n  }\n}\n\nexport const getInjectedExtensions = (): Array<string> => {\n  const { injectedWeb3 } = window\n  return injectedWeb3 ? Object.keys(injectedWeb3) : []\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,WAAW,CAAC,OAAwB,eAAwB;AAC5D,MAAA,QAAQ,MAAM,SAAS,EAAE;AAC7B,WAAS,MAAM,SAAS,IAAI,MAAM,MAAM;AAClC,QAAA,eAAe,KAAK,IAAI,IAAI,cAAc,KAAK,MAAM,SAAS,CAAC;AACrE,SAAO,OAAO,KAAK,OAAO,YAAY,IAAI;AAC5C;AAEO,IAAM,eAAe,CAAC;EAC3B;AACF,OAAiD;EAC/C,aAAa,MAAM,gBAAgB;AACrC;AAEO,IAAM,aAAa,CAAC;EACzB;AACF,MAA6C;AAEpC,SAAA,EAAE,OAAO,SAAS,QAAQ,IAAI,KAAK,GAAG,CAAC,EAAE;AAClD;AAEO,IAAM,iBAAiB,CAAC;EAC7B;AACF,MAA0D;AACjD,SAAA,EAAE,oBAAoB,SAAS,IAAI,IAAI,gBAAgB,GAAG,CAAC,EAAE;AACtE;AAEA,IAAM,oBAAoB,OAAO;EAC/B,KAAK;EACL,OAAO,OAAO,MAAM,QAAQ,CAAC;AAC/B,CAAC,EAAE;AAEI,IAAM,uBAAuB,CAAC;EACnC;AACF,MAA2D;AACzD,QAAM,EAAE,KAAK,MAAM,IAAI,kBAAkB,KAAK;AAEvC,SAAA;IACL,GAAI,QAAQ,EAAE,SAAS,MAAM,KAAK,EAAA,IAAM,CAAA;IACxC,KAAK,SAAS,KAAK,EAAE;EAAA;AAEzB;AAEO,IAAM,2BAA2B,CAAC;EACvC;AACF,OAA4C;EAC1C,KAAK,SAAS,UAAU,IAAI,KAAK,GAAG,EAAE;;AACxC;AAEO,IAAM,iBAAiB,CAC5B,EAAE,OAAO,iBAAA,GACT,iBACsE;EACtE,KAAK,MAAM,KAAK;EAChB,WAAW,MAAM,gBAAgB;EACjC,aAAa,SAAS,aAAa,CAAC;AACtC;AAEO,IAAM,mBAAmB,CAAC;EAC/B;AACF,OAAoD;EAClD,aAAa,SAAS,IAAI,IAAI,gBAAgB,GAAG,CAAC;AACpD;AAEO,IAAM,oBAAoB,CAAC;EAChC;EACA;AACF,MACE,MAAM,UAAU,MAAM,CAAC,IACnB;EACE,MAAM;EACN,cAAc;IACZ,iBAAiB,SACb,iBAAiB,MAAM,CAAC,IACxB;EAAA;AAER,IACA,CAAA;;;AChFN,IAAM,eAAe,UAAA,EAAY;AACjC,IAAM,eAAe,CAAC,YACpB,QAAQ,WAAW,IAAI,IAAI,QAAQ,OAAO,IAAI,aAAa,OAAO;AAEpD,SAAA,yBACd,SACA,aACA,SACgB;AACV,QAAA,YAAY,CAAC,SACjB,QAAQ;IACN;IACA,MAAM,MAAM,IAAI;IAChB,MAAM;EAAA,CACP,EAAE,KAAK,CAAC,EAAE,UAAU,MAAM,QAAQ,SAAS,CAAC;AACzC,QAAA,YAAY,aAAa,OAAO;AACtC,QAAM,SAAS,OACb,UACA,kBAQA,UACA,eACA,IAAI,cACD;AACH,UAAM,UAAU,cAAc,eAAe,QAAQ,CAAC;AAEtD,UAAM,MAAkC,CAAA;AACxC,QAAI,mBAAmB,CAAA;AAEjB,UAAA,EAAE,QAAQ,IAAI,QAAQ;AAC5B,UAAM,QAA2B,CAAA;AAEjC,YAAQ,UAAU,iBAAiB,IAAI,CAAC,EAAE,WAAA,MAAiB;AACnD,YAAA,kBAAkB,iBAAiB,UAAU;AACnD,UAAI,CAAC;AACH,cAAM,IAAI,MAAM,WAAW,UAAU,mBAAmB;AACpD,YAAA,KAAK,gBAAgB,KAAK;AAE5B,UAAA,iBAAkB,KAAK,UAAU;AAEjC,UAAA,CAACA,sCAAuB,UAA8B,GAAG;AAC3D,YACE,gBAAgB,MAAM,WAAW,KACjC,gBAAgB,iBAAiB,WAAW;AAE5C;AACF,cAAM,IAAI;UACR,+CAA+C,UAAU;QAAA;MAC3D;AAGK,aAAA;QACL;QACAA,sCAAuB,UAA8B;UACnD;UACA;QAAA;MACF;IACF,CACD;AAED,UAAM,iBAAiB,QAAQ,SAAS,CAAC,IAAI,IAAI;AACjD,QAAI,kBAAkB;AACd,YAAA,IAAI,MAAM,gCAAgC;AAClD,QAAI,UAAU;AACV,QAAA,SAAS,MAAM,QAAQ;AAC3B,QAAI,UAAU;AACd,QAAI,wBAAwB;AAEtB,UAAA,SAAS,MAAM,YAAY,GAAwB;AACzD,UAAM,KAAK,OAAO;AAClB,QAAI,GAAW,QAAA,OAAO,OAAO,WAAW,QAAQ,EAAE,IAAI;AAE/C,WAAA;MACL;MACA;MACA,QAAQ,OAAO,SAAS;MACxB;MACA;IAAA;EACF;AAGK,SAAA,EAAE,WAAW,QAAQ,UAAU;AACxC;;;ACrFA,IAAM,wBAAA,oBAA4B,IAA8B;EAC9D;EACA;EACA;EACA;AACF,CAAC;AAEY,IAAA,2BAA2B,OACtC,MACA,aAC+B;;AAC3B,MAAA,SAAQ,YAAO,iBAAP,mBAAsB;AAElC,MAAI,CAAC,MAAO,OAAM,IAAI,MAAM,2BAA2B,IAAI,GAAG;AAE9D,QAAM,mBAAmB,MAAM,MAAM,OAAO,QAAQ;AAC9C,QAAA,cAAc,iBAAiB,OAAO,YAAY;IACtD,iBAAiB;EAAA;AAEnB,QAAM,UAAU,iBAAiB,OAAO,QAAQ,KAAK,iBAAiB,MAAM;AAE5E,QAAM,qBAAqB,CACzB,aAEA,SACG,OAAO,CAAC,EAAE,KAAA,MAAW,sBAAsB,IAAI,IAAK,CAAC,EACrD,IAAI,CAAC,MAAM;AACV,UAAM,iBAAiB;MACrB,EAAE;MACF;MACA;IAAA;AAEK,WAAA;MACL,GAAG;MACH;IAAA;EACF,CACD;AAEL,MAAI,kBAA6C;IAC/C,MAAM,iBAAiB,SAAS,IAAI;EAAA;AAGhC,QAAA,YAAA,oBAAgB,IAAmD;AACzE,QAAM,OAAO,iBAAiB,SAAS,UAAU,CAAC,MAAM;AACtD,sBAAkB,mBAAmB,CAAC;AAC5B,cAAA,QAAQ,CAAC,OAAO;AACxB,SAAG,eAAe;IAAA,CACnB;EAAA,CACF;AAEM,SAAA;IACL;IACA,aAAa,MAAM;IACnB,WAAW,CAAC,OAAsD;AAChE,gBAAU,IAAI,EAAE;AAChB,aAAO,MAAM;AACX,kBAAU,OAAO,EAAE;MAAA;IACrB;IAEF,YAAY,MAAM;AACX,WAAA;IAAA;EACP;AAEJ;AAEO,IAAM,wBAAwB,MAAqB;AAClD,QAAA,EAAE,aAAA,IAAiB;AACzB,SAAO,eAAe,OAAO,KAAK,YAAY,IAAI,CAAA;AACpD;",
  "names": ["signedExtensionMappers"]
}
