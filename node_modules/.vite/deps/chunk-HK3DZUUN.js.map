{
  "version": 3,
  "sources": ["../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/utils/lazy.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/providers/light-client/wellknown-chains.ts", "../../.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/src/providers/light-client/provider.ts"],
  "sourcesContent": ["const empty = Symbol(\"empty\");\n\nexport function lazy<T>(get: () => T) {\n  let value: T | typeof empty = empty;\n\n  return () => {\n    if (value !== empty) {\n      return value;\n    }\n\n    value = get();\n    return value;\n  };\n}\n", "export const wellknownChains = {\n  polkadot: [\n    () => import(\"polkadot-api/chains/polkadot\"),\n    {\n      polkadot_asset_hub: () =>\n        import(\"polkadot-api/chains/polkadot_asset_hub\"),\n      polkadot_bridge_hub: () =>\n        import(\"polkadot-api/chains/polkadot_bridge_hub\"),\n      polkadot_collectives: () =>\n        import(\"polkadot-api/chains/polkadot_collectives\"),\n      polkadot_coretime: () => import(\"polkadot-api/chains/polkadot_coretime\"),\n      polkadot_people: () => import(\"polkadot-api/chains/polkadot_people\"),\n    },\n  ],\n  kusama: [\n    () => import(\"polkadot-api/chains/ksmcc3\"),\n    {\n      kusama_asset_hub: () => import(\"polkadot-api/chains/ksmcc3_asset_hub\"),\n      kusama_bridge_hub: () => import(\"polkadot-api/chains/ksmcc3_bridge_hub\"),\n      kusama_encointer: () => import(\"polkadot-api/chains/ksmcc3_encointer\"),\n      kusama_people: () => import(\"polkadot-api/chains/ksmcc3_people\"),\n    },\n  ],\n  paseo: [\n    () => import(\"polkadot-api/chains/paseo\"),\n    {\n      paseo_asset_hub: () => import(\"polkadot-api/chains/paseo_asset_hub\"),\n      paseo_people: () => import(\"polkadot-api/chains/paseo_people\"),\n    },\n  ],\n  westend: [\n    () => import(\"polkadot-api/chains/westend2\"),\n    {\n      westend_asset_hub: () => import(\"polkadot-api/chains/westend2_asset_hub\"),\n      westend_bridge_hub: () =>\n        import(\"polkadot-api/chains/westend2_bridge_hub\"),\n      westend_collectives: () =>\n        import(\"polkadot-api/chains/westend2_collectives\"),\n      westend_people: () => import(\"polkadot-api/chains/westend2_people\"),\n    },\n  ],\n} as const;\n\nexport type WellknownRelayChainId = keyof typeof wellknownChains;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\n\nexport type WellknownParachainId = KeysOfUnion<\n  (typeof wellknownChains)[WellknownRelayChainId][1]\n>;\n", "/* eslint-disable no-unexpected-multiline */\nimport { lazy } from \"../../utils/lazy.js\";\nimport {\n  wellknownChains,\n  type WellknownParachainId,\n  type WellknownRelayChainId,\n} from \"./wellknown-chains.js\";\nimport type { getSmoldotExtensionProviders } from \"@substrate/smoldot-discovery\";\nimport { createClient } from \"polkadot-api\";\nimport { getSmProvider } from \"polkadot-api/sm-provider\";\nimport type { JsonRpcProvider } from \"polkadot-api/ws-provider/web\";\n\nconst getProviderSymbol = Symbol(\"getProvider\");\n\nexport type LightClientProvider = {\n  [getProviderSymbol]: () => JsonRpcProvider;\n};\n\ntype AddChainOptions<TWellknownChainId> =\n  | { chainSpec: string }\n  | { id: TWellknownChainId };\n\ntype LightClientOptions = {\n  /**\n   * Connect to the first available {@link https://github.com/paritytech/substrate-connect | Substrate Connect} provider.\n   */\n  useExtensionProvider?: boolean;\n};\n\nexport function createLightClientProvider({\n  useExtensionProvider = true,\n}: LightClientOptions = {}) {\n  const getSmoldot = lazy(async () => {\n    if (!useExtensionProvider) {\n      return startSmoldotWorker();\n    }\n\n    return (await startSubstrateConnectWorker()) ?? startSmoldotWorker();\n  });\n\n  return {\n    addRelayChain<TRelayChainId extends WellknownRelayChainId>(\n      options: AddChainOptions<TRelayChainId>,\n    ) {\n      const getChainSpec = lazy(() =>\n        \"chainSpec\" in options\n          ? Promise.resolve(options.chainSpec)\n          : wellknownChains[options.id][0]().then((chain) => chain.chainSpec),\n      );\n\n      const getRelayChain = lazy(async () => {\n        const smoldot = await getSmoldot();\n        const chainSpec = await getChainSpec();\n\n        if (isSubstrateConnectProvider(smoldot)) {\n          return smoldot.addChain(chainSpec);\n        }\n\n        return smoldot.addChain({ chainSpec });\n      });\n\n      return addLightClientProvider({\n        [getProviderSymbol]() {\n          return getSmProvider(getRelayChain());\n        },\n\n        addParachain<\n          TParachainId extends\n            keyof (typeof wellknownChains)[TRelayChainId][1] extends never\n              ? WellknownParachainId\n              : keyof (typeof wellknownChains)[TRelayChainId][1],\n        >(options: AddChainOptions<TParachainId>) {\n          return addLightClientProvider({\n            [getProviderSymbol]() {\n              const chainSpecPromise =\n                \"chainSpec\" in options\n                  ? Promise.resolve(options.chainSpec)\n                  : // @ts-expect-error TODO: fix this\n                    Object.fromEntries(\n                      Object.values(wellknownChains).flatMap((relayChain) =>\n                        Object.entries(relayChain[1]),\n                      ),\n                    )\n                      [options.id]()\n                      .then((chain) => chain.chainSpec);\n\n              const parachainPromise = Promise.all([\n                getRelayChain(),\n                chainSpecPromise,\n              ]).then(([relayChain, chainSpec]) =>\n                \"addChain\" in relayChain\n                  ? relayChain.addChain(chainSpec)\n                  : (async () => {\n                      const smoldot = await getSmoldot();\n\n                      return isSubstrateConnectProvider(smoldot)\n                        ? smoldot.addChain(chainSpec)\n                        : smoldot.addChain({\n                            chainSpec,\n                            potentialRelayChains: [relayChain],\n                          });\n                    })(),\n              );\n\n              return getSmProvider(parachainPromise);\n            },\n          });\n        },\n      });\n    },\n  };\n}\n\nexport function isLightClientProvider(\n  value: unknown,\n): value is LightClientProvider {\n  return lightClientProviders.has(value as LightClientProvider);\n}\n\nexport function createClientFromLightClientProvider(\n  provider: LightClientProvider,\n) {\n  return createClient(provider[getProviderSymbol]());\n}\n\nconst lightClientProviders = new WeakSet<LightClientProvider>();\n\nfunction addLightClientProvider<T extends LightClientProvider>(provider: T) {\n  lightClientProviders.add(provider);\n  return provider;\n}\n\nfunction startSmoldotWorker() {\n  return import(\"polkadot-api/smoldot/from-worker\").then(\n    ({ startFromWorker }) =>\n      startFromWorker(\n        new Worker(new URL(\"polkadot-api/smoldot/worker\", import.meta.url), {\n          type: \"module\",\n        }),\n      ),\n  );\n}\n\nconst substrateConnectSet = new WeakSet<\n  Awaited<ReturnType<typeof getSmoldotExtensionProviders>[number][\"provider\"]>\n>();\n\nfunction startSubstrateConnectWorker() {\n  return import(\"@substrate/smoldot-discovery\").then(\n    async ({ getSmoldotExtensionProviders }) => {\n      const provider = await getSmoldotExtensionProviders().at(0)?.provider;\n\n      if (provider !== undefined) {\n        substrateConnectSet.add(provider);\n      }\n\n      return provider;\n    },\n  );\n}\n\nfunction isSubstrateConnectProvider(\n  value: unknown,\n): value is Awaited<\n  ReturnType<typeof getSmoldotExtensionProviders>[number][\"provider\"]\n> {\n  return substrateConnectSet.has(value as never);\n}\n"],
  "mappings": "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",
  "names": ["options"]
}
