{
  "version": 3,
  "sources": ["../../.pnpm/@polkadot-api+descriptors@file+.papi+descriptors_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@polkadot-api/descriptors/dist/metadataTypes-VXDSMXBR.mjs"],
  "sourcesContent": ["// .papi/descriptors/src/metadataTypes.ts\nvar content = \"\";\nvar metadataTypes_default = content;\nexport {\n  metadataTypes_default as default\n};\n"],
  "mappings": ";;;AACA,IAAI,UAAU;AACd,IAAI,wBAAwB;",
  "names": []
}
