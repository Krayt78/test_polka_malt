import {
  getSmProvider
} from "./chunk-CGJMGULG.js";
import {
  createClient
} from "./chunk-AKNCNGJG.js";

// node_modules/.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/build/utils/lazy.js
var empty = Symbol("empty");
function lazy(get) {
  let value = empty;
  return () => {
    if (value !== empty) {
      return value;
    }
    value = get();
    return value;
  };
}

// node_modules/.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/build/providers/light-client/wellknown-chains.js
var wellknownChains = {
  polkadot: [
    () => import("./chains_polkadot-VIDGNBCV.js"),
    {
      polkadot_asset_hub: () => import("./chains_polkadot_asset_hub-W2JHBSEY.js"),
      polkadot_bridge_hub: () => import("./chains_polkadot_bridge_hub-MODFRXRU.js"),
      polkadot_collectives: () => import("./chains_polkadot_collectives-3U2TDOAI.js"),
      polkadot_coretime: () => import("./chains_polkadot_coretime-XOWJOHEF.js"),
      polkadot_people: () => import("./chains_polkadot_people-ZSJ43QTI.js")
    }
  ],
  kusama: [
    () => import("./chains_ksmcc3-VRNB2RHM.js"),
    {
      kusama_asset_hub: () => import("./chains_ksmcc3_asset_hub-UQ5Y4Q3A.js"),
      kusama_bridge_hub: () => import("./chains_ksmcc3_bridge_hub-IXWISG7A.js"),
      kusama_encointer: () => import("./chains_ksmcc3_encointer-UYCERUKL.js"),
      kusama_people: () => import("./chains_ksmcc3_people-RRCAOOOX.js")
    }
  ],
  paseo: [
    () => import("./chains_paseo-C47U2JON.js"),
    {
      paseo_asset_hub: () => import("./chains_paseo_asset_hub-MOEOOJYI.js"),
      paseo_people: () => import("./chains_paseo_people-QZEMTEV3.js")
    }
  ],
  westend: [
    () => import("./chains_westend2-FKOLWSZN.js"),
    {
      westend_asset_hub: () => import("./chains_westend2_asset_hub-RW6VZ3CJ.js"),
      westend_bridge_hub: () => import("./chains_westend2_bridge_hub-CWNLFFWV.js"),
      westend_collectives: () => import("./chains_westend2_collectives-NXH275LR.js"),
      westend_people: () => import("./chains_westend2_people-SPAEGIJO.js")
    }
  ]
};

// node_modules/.pnpm/@reactive-dot+core@0.40.4_polkadot-api@1.12.2_jiti@2.4.2_postcss@8.5.4_rxjs@7.8.2_/node_modules/@reactive-dot/core/build/providers/light-client/provider.js
var getProviderSymbol = Symbol("getProvider");
function createLightClientProvider({ useExtensionProvider = true } = {}) {
  const getSmoldot = lazy(async () => {
    if (!useExtensionProvider) {
      return startSmoldotWorker();
    }
    return await startSubstrateConnectWorker() ?? startSmoldotWorker();
  });
  return {
    addRelayChain(options) {
      const getChainSpec = lazy(() => "chainSpec" in options ? Promise.resolve(options.chainSpec) : wellknownChains[options.id][0]().then((chain) => chain.chainSpec));
      const getRelayChain = lazy(async () => {
        const smoldot = await getSmoldot();
        const chainSpec = await getChainSpec();
        if (isSubstrateConnectProvider(smoldot)) {
          return smoldot.addChain(chainSpec);
        }
        return smoldot.addChain({ chainSpec });
      });
      return addLightClientProvider({
        [getProviderSymbol]() {
          return getSmProvider(getRelayChain());
        },
        addParachain(options2) {
          return addLightClientProvider({
            [getProviderSymbol]() {
              const chainSpecPromise = "chainSpec" in options2 ? Promise.resolve(options2.chainSpec) : (
                // @ts-expect-error TODO: fix this
                Object.fromEntries(Object.values(wellknownChains).flatMap((relayChain) => Object.entries(relayChain[1])))[options2.id]().then((chain) => chain.chainSpec)
              );
              const parachainPromise = Promise.all([
                getRelayChain(),
                chainSpecPromise
              ]).then(([relayChain, chainSpec]) => "addChain" in relayChain ? relayChain.addChain(chainSpec) : (async () => {
                const smoldot = await getSmoldot();
                return isSubstrateConnectProvider(smoldot) ? smoldot.addChain(chainSpec) : smoldot.addChain({
                  chainSpec,
                  potentialRelayChains: [relayChain]
                });
              })());
              return getSmProvider(parachainPromise);
            }
          });
        }
      });
    }
  };
}
function isLightClientProvider(value) {
  return lightClientProviders.has(value);
}
function createClientFromLightClientProvider(provider) {
  return createClient(provider[getProviderSymbol]());
}
var lightClientProviders = /* @__PURE__ */ new WeakSet();
function addLightClientProvider(provider) {
  lightClientProviders.add(provider);
  return provider;
}
function startSmoldotWorker() {
  return import("./smoldot_from-worker-WJGWJAND.js").then(({ startFromWorker }) => startFromWorker(new Worker(new URL("polkadot-api/smoldot/worker", import.meta.url), {
    type: "module"
  })));
}
var substrateConnectSet = /* @__PURE__ */ new WeakSet();
function startSubstrateConnectWorker() {
  return import("./esm-BLNYYRZC.js").then(async ({ getSmoldotExtensionProviders }) => {
    var _a;
    const provider = await ((_a = getSmoldotExtensionProviders().at(0)) == null ? void 0 : _a.provider);
    if (provider !== void 0) {
      substrateConnectSet.add(provider);
    }
    return provider;
  });
}
function isSubstrateConnectProvider(value) {
  return substrateConnectSet.has(value);
}

export {
  createLightClientProvider,
  isLightClientProvider,
  createClientFromLightClientProvider
};
//# sourceMappingURL=chunk-HK3DZUUN.js.map
